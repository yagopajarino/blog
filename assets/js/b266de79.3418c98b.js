"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3518],{4369:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/2024/08/20/precios-claros","metadata":{"permalink":"/2024/08/20/precios-claros","source":"@site/blog/2024-08-20-precios-claros/index.md","title":"Precios claros","description":"Pensamientos previos al (re)lanzamiento del programa precios claros","date":"2024-08-20T00:00:00.000Z","tags":[{"inline":true,"label":"gobierno","permalink":"/tags/gobierno"},{"inline":true,"label":"economia","permalink":"/tags/economia"}],"readingTime":3.465,"hasTruncateMarker":true,"authors":[{"name":"Yago Pajari\xf1o","title":"CS Student, Developer, and Tech Enthusiast","url":"https://github.com/yagopajarino","imageURL":"/img/ape.png","key":"yago"}],"frontMatter":{"title":"Precios claros","authors":"yago","tags":["gobierno","economia"]},"unlisted":false,"nextItem":{"title":"Criptograf\xeda | Encriptando cosas","permalink":"/2024/07/26/encriptando-cosas"}},"content":"Pensamientos previos al (re)lanzamiento del programa precios claros\\n\\n\x3c!-- truncate --\x3e\\n\\n## Memories supermercadistas\\n\\nSimplemente encontr\xe9 este tweet que desbloque\xf3 algunos recuerdos y merecen un post.\\n\\n![image](tweet.png)\\n\\nHace un par de meses me independic\xe9 de la casa de mis viejos, comenzando toda la movida de vivir solo, particularmente la relacionada a las compras. Una de las primeras decisiones que tuve que tomar fue: a qu\xe9 supermercado ir, cada cu\xe1nto ir (todos los d\xedas, una vez por semana, una vez al mes, etc), c\xf3mo pagar (descuentos y promos).\\n\\nY claro, los principios de econom\xeda que alguna vez se vieron en la facultad se comienzan a sentir en la realidad: quer\xeda ir al supermercado que me permita comprar todos los productos que quer\xeda al menor costo posible.\\n\\nLo primero que me di cuenta es que ten\xeda a una distancia razonable un Coto, Disco y Carrefour. Todos hipermercados por lo que no ten\xeda problemas de surtido, todo lo que hab\xeda en mi lista iba a estar en cualquiera de los tres.\\n\\nEl problema era determinar el costo de lo que iba a terminar pagando en cada caso, imposible saber. Adem\xe1s, existe un sin fin de promociones bancarias con l\xedmites semanales o mensuales, con ciertas tarjeta de cr\xe9dito y aplicable en ciertos d\xedas. Al final, si quer\xeda pagar lo menos posible ten\xeda que ir a X supermercado, el d\xeda Y y pagando con la tarjeta Z del banco W (a trav\xe9s de MODO, claro).\\n\\nR\xe1pidamente desist\xed de hacer el an\xe1lisis fino y termin\xe9 eligiendo ir al que me quedaba m\xe1s cerca. Siempre me pareci\xf3 que hab\xeda una oportunidad ah\xed, poder usar la teconolog\xeda para dar acceso a la informaci\xf3n al consumidor.\\n\\n## La medida\\n\\nSeg\xfan anucian desde el gobierno, parece que este jueves 22 de agosto 2024 se va a empezar a publicar una base de datos de precios diarios, como para que el yo de hace unos meses pueda hacer su lista del super y ver en que supermercado le conviene hacer la compra. Un sue\xf1o hecho realidad.\\n\\nY lo mejor de todo, lo apuntan a desarrolladores, analistas, consultoras, etc. Se abre un abanico gigante de usos y aplicaciones que se pueden desarrollar con esta informaci\xf3n. Algunas ideas que se me vienen a la mente:\\n\\n1. Arma tu lista del super y fijate donde comprar m\xe1s barato\\n2. \xcdndices de precios diarios que no se basen en bots que scrapean webs\\n3. An\xe1lisis de conveniencia de promociones bancarias\\n4. An\xe1lisis de competitividad y oportunidades de negocio en ciertos productos.\\n\\n## Back to macroeconom\xeda\\n\\nA todos los que estudiamos en alguna facultad de ciencias econ\xf3micas, bien temprano en la carrera nos presentan los \u2728mercados de competencia perfecta\u2728. Los mercados de competencia perfecta son aquellos en los que se cumplen:\\n\\n1. La existencia de un elevado n\xfamero de productores y consumidores.\\n2. Las empresas vendan un producto homog\xe9neo en el mercado.\\n3. **Las empresas y los consumidores tengan informaci\xf3n completa, gratuita y sim\xe9trica.**\\n4. No haya barreras de entrada o salida al mercado.\\n5. Movilidad perfecta de bienes y factores.\\n6. Sin costos de transacci\xf3n.\\n\\n:::info\\nM\xe1s info de los mercados de competencia perfecta en [Competencia perfecta | Wikipedia](https://es.wikipedia.org/wiki/Competencia_perfecta)\\n:::\\n\\nEn mi caso personal facultativo, este concepto de competencia perfecta era algo que se ve\xeda al principio, como una _abstracci\xf3n_ del mercado y luego toda la teor\xeda se segu\xeda desde ah\xed.\\n\\nEl problema, claro, era que la teor\xeda se quedaba en eso mismo porque esta abstracci\xf3n era poco realista. Por lo menos en mi punto de vista.\\n\\nEspecialmente en Argentina, en donde para todo producto parece haber solo dos productores, los mercados de competencia perfecta parec\xedan imposibles. Ni hablar de la famosa frase \\"ya no se ni cuanto cuestan las cosas\\" que hayamos usado (o pensado) todos.\\n\\nOjala que precios claros pueda ayudar a mejorar esta competitividad. Los consumidores van a tener la informaci\xf3n del supermercado m\xe1s barato. Los productores van a poder saber c\xf3mo se posicionan en precio con sus competidores, los supermercados van a poder ver qu\xe9 competidores tienen mejores precios.\\n\\nGran medida, veremos como se desarrolla, quiz\xe1s el proximo post sea con la app que calcule el menor costo de la lista del super. \ud83d\ude80"},{"id":"/2024/07/26/encriptando-cosas","metadata":{"permalink":"/2024/07/26/encriptando-cosas","source":"@site/blog/2024-07-26-encriptando-cosas/index.md","title":"Criptograf\xeda | Encriptando cosas","description":"Intro a criptograf\xeda, con algunos de los algoritmos m\xe1s famosos y algo de pr\xe1ctica para que te lleves tarea :/","date":"2024-07-26T00:00:00.000Z","tags":[{"inline":true,"label":"cryptography","permalink":"/tags/cryptography"}],"readingTime":5.34,"hasTruncateMarker":true,"authors":[{"name":"Yago Pajari\xf1o","title":"CS Student, Developer, and Tech Enthusiast","url":"https://github.com/yagopajarino","imageURL":"/img/ape.png","key":"yago"}],"frontMatter":{"title":"Criptograf\xeda | Encriptando cosas","authors":"yago","tags":["cryptography"]},"unlisted":false,"prevItem":{"title":"Precios claros","permalink":"/2024/08/20/precios-claros"},"nextItem":{"title":"Criptograf\xeda | Hello Cryptography","permalink":"/2024/07/19/hello-crypto"}},"content":"Intro a criptograf\xeda, con algunos de los algoritmos m\xe1s famosos y algo de pr\xe1ctica para que te lleves tarea :/\\n\\n\x3c!-- truncate --\x3e\\n\\n## Introducci\xf3n a criptograf\xeda\\n\\nSemana uno del core program. Estuvimos viendo una banda de conceptos critogr\xe1ficos, poca pr\xe1ctica, mucha teor\xeda. Bien como para arrancar.\\n\\nNo se bien como organizar este post porque hay un mont\xf3n de temas para meter, igual voy a hacer una selecci\xf3n de los temas que m\xe1s me llamaron la atenci\xf3n.\\n\\n## El problema del eavesdropper\\n\\nDesde basicamente siempre el ser humano tuvo la necesidad de comunicarse con los otros de forma privada. En su momento, mandabas una carta y esperabas que solo el destinatario sea quien la reciba y lea el contenido, sin embargo en el medio pasaba por un mont\xf3n de manos.\\n\\n\xbfQu\xe9 pasaba si alguna de esas manos abr\xeda la carta, la le\xeda y la volv\xeda a ensobrar? Nada, probablemente ni vos ni el destinatario sabr\xedan que alguien ley\xf3 el mensaje que estaban intercambiando.\\n\\n:::info\\nEse acto de _escuchar secretamente_ se conoce como **eavesdropping**\\n:::\\n\\nAhora bien, que pasar\xeda si vos sos el cartero curioso que quiere leer una carta que no es para \xe9l, pero al abrir el sobre te encontr\xe1s con un texto como este:\\n\\n> _Szwl dt pdeld wpjpyoz pdez dzd nclnv azc slmpc pynzyecloz wl vpj. Slnpxpwz dlmpc cpdazyotpyoz l pdep ehppe nzy wl alwlmcl \\"tyepcgpyetzy\\" e.wj/IeDj6_\\n\\nParece un mensaje escrito en un idioma rar\xedsimo que probablemente no conozcas, o ni siquiera exista. Probablemente se trate de un mensaje encriptado.\\n\\nQu\xe9 hacer si abris el sobre y te encontr\xe1s eso? Depende. Si simplemente estabas revisando la correspondencia de un [NPC](https://en.wikipedia.org/wiki/Non-player_character) lo volv\xe9s a ensobrar y te olvid\xe1s, pero si te interesa podr\xedas intentar descifrar en mensaje oculto en el texto.\\n\\nLo siguiente que deber\xedas conocer es el algoritmo de encriptado que se us\xf3 y poder desencriptar el mensaje. Suerte con eso.\\n\\n## Encriptado: the basics\\n\\nAhora s\xed tenemos la motivaci\xf3n para introducir algunos temas particulares del mundo criptogr\xe1fico. En todos los casos existe un **mensaje** que queremos encriptar para que solo el destinatario sea quien pueda desencriptarlo y leerlo.\\n\\nEntonces, como en cualquier comunicaci\xf3n, existen dos personas: un **emiso** y un **receptor** del mensaje. Hasta ac\xe1 nada nuevo.\\n\\nLo siguiente es definir alg\xfan mecanismo que permita al emisor _encriptar_ el mensaje y enviar al rececptor un **mensaje cifrado** (ciphertext en ingl\xe9s).\\n\\n### Caesar Cipher\\n\\nUno de los algoritmos m\xe1s conocidos por su simplicidad es el [Caesar Cipher](https://en.wikipedia.org/wiki/Caesar_cipher) en honor a Julio Cesar, se dice que lo usaba en sus comunicaciones militares.\\n\\nC\xf3mo funciona? Simplemente se _shiftea_ el abecedario, se reemplaza cada letra por la que se encuentra _n_ veces despu\xe9s en el abecedario. Con un $$n=3$$ el nuevo abecedario quedar\xeda asi\\n\\n<table><tbody><tr><td>original</td><td>a</td><td>b</td><td>c</td><td>d</td><td>e</td><td>f</td><td>g</td><td>h</td><td>i</td><td>j</td><td>l</td><td>m</td><td>n</td><td>o</td><td>p</td><td>q</td><td>r</td><td>s</td><td>t</td><td>u</td><td>v</td><td>w</td><td>x</td><td>y</td><td>z</td></tr><tr><td>nueva</td><td>d</td><td>e</td><td>f</td><td>g</td><td>h</td><td>i</td><td>j</td><td>k</td><td>l</td><td>m</td><td>o</td><td>p</td><td>q</td><td>r</td><td>s</td><td>t</td><td>u</td><td>v</td><td>w</td><td>x</td><td>y</td><td>z</td><td>a</td><td>b</td><td>c</td></tr></tbody></table>\\n\\nY con esta tabla se cambia cada letra del mensaje\\n\\n:::info\\nPodr\xedas probar desencriptar el mensaje de arriba sabiendo esto \ud83d\udc40\\n:::\\n\\n### Encriptado sim\xe9trico vs asim\xe9trico\\n\\nSi probaste desencriptar el mensaje original usando el ceaser cipher, seguro hayas tenido que encontrar el _n_ que transforma el mensaje encriptado en el original.\\n\\nEs que para que un cifrado como el del cesar funcione, se necesita que ambas partes est\xe9n de acuerdo en ese _n_ que van a usar, el emisor para encriptar el mensaje y el receptor para desencriptarlo.\\n\\n:::info\\nSe dice que Cesar siempre usaba un _n_ igual a 3 para encriptar sus mensajes.\\n:::\\n\\nEste tipo de algoritmos se conocen como **sim\xe9tricos**: ambas partes deben ponerse de acuerdo en un secreto com\xfan, una **key**, que les permita operar con el algoritmo.\\n\\n\xbfC\xf3mo funcionar\xeda en la realidad? Supongamos que somos un general a punto de partir a la guerra y necesitamos definir una _key_ para intercambiar mensajes con nuestros oficiales, simplemente nos juntamos todos, definimos una _key_ secreta, y cada uno parte conociento el secreto.\\n\\nEn cambio, loa algoritmos de encriptado **asim\xe9tricos** eliminan esta necesidad de compartir un secreto com\xfan con la otra parte. Seguro hayas escuchado los t\xe9rminos **clave p\xfablica** y **clave privada**, veamos como funcionan.\\n\\n### Algoritmos de clave p\xfablica - clave privada\\n\\nEn este caso, cada persona que quiere participar en un intercambio de mensajes genera dos claves, una clave p\xfablica, que va a compartir con todo el mundo y una clave privada que no se comparte con nadie.\\n\\nEl algoritmo m\xe1s famoso de esta clase es, me pongo de pie, [RSA](https://es.wikipedia.org/wiki/RSA). Creado por Rivest, Shamir y Adleman, el algoritmo funciona algo as\xed:\\n\\n1. Bob quiere recibir mensajes encriptados, para ello genera un conjunto de claves: su clave p\xfablica la comparte por internet a todo el mundo, su clave privada la mantiene secreta.\\n2. Mary quiere enviar el mensaje \'hola\' a Bob. Para ello encripta el mensaje usando una funci\xf3n que toma el mensaje \'hola\' m\xe1s la clave p\xfablica de Bob y genera un texto encriptado.\\n3. Bob recibe el texto encriptado y usando su clave privada que \xe9l solo sabe, puede descifrar el mensaje que mary le envi\xf3.\\n\\nParece simple, de hecho lo es ya que se basa en algunos conceptos de m\xf3dulos y n\xfameros primos muy sencillos. Vi unos cuantos videos que explicaban como funciona el algoritmo, te dejo el que me pareci\xf3 m\xe1s claro.\\n\\n<iframe width=\\"700\\" height=\\"400\\" src=\\"https://www.youtube.com/embed/4zahvcJ9glg?si=_CCbdx7WbidFJSS3\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" referrerpolicy=\\"strict-origin-when-cross-origin\\" allowfullscreen></iframe>\\n\\nBtw, acabo de descubrir que puedo insertar videos en los posts \ud83d\ude4c\ud83c\udffc\\n\\nEntonces, en este caso ya no es necesario que las partes se pongan de acuerdo en un secreto para poder encriptar y desencriptar un mensaje, mucho m\xe1s pr\xe1ctico y eficiente. De hecho hoy en d\xeda RSA sigue siendo el estandar a la hora de encriptar mensajes, seguramente tu navegador lo este usando ahora mismo.\\n\\n:::info\\nPara m\xed lo mejor de RSA es que usa conceptos muy simples como n\xfameros primos, modulos y operaciones sencillas para lograr un algoritmo casi inquebrantable\\n:::\\n\\nEl siguiente algoritmo de este estilo que vale la pena estudiar se llama AES (Advanced Encription System), te dej\xf3 este video de [Computerfile](https://www.youtube.com/@Computerphile) si no est\xe1s subscripto te lo recomiendo junto a su primo [Numberphile](https://www.youtube.com/@numberphile)\\n\\n<iframe width=\\"700\\" height=\\"400\\" src=\\"https://www.youtube.com/embed/O4xNJsjtN6E?si=-UBzpQDa-J-NQ0so\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" referrerpolicy=\\"strict-origin-when-cross-origin\\" allowfullscreen></iframe>\\n\\nCreo que con estos temas alcanza para tener una buena base de algoritmos de encriptado, sobre todo entender la necesidad y c\xf3mo funcionan los algoritmos m\xe1s famosos: ceasar, RSA, AES.\\n\\nAntes de terminar, te dejo link a [Rot13 | Codewars](https://www.codewars.com/kata/530e15517bc88ac656000716) por si quer\xe9s poner en pr\xe1ctica algo de lo aprendido."},{"id":"/2024/07/19/hello-crypto","metadata":{"permalink":"/2024/07/19/hello-crypto","source":"@site/blog/2024-07-19-hello-crypto/index.md","title":"Criptograf\xeda | Hello Cryptography","description":"Notas, recursos y pensamientos con todo lo necesario para iniciar en el mundo de la criptograf\xeda programable.","date":"2024-07-19T00:00:00.000Z","tags":[{"inline":true,"label":"pse","permalink":"/tags/pse"},{"inline":true,"label":"zk","permalink":"/tags/zk"},{"inline":true,"label":"cryptography","permalink":"/tags/cryptography"}],"readingTime":7.33,"hasTruncateMarker":true,"authors":[{"name":"Yago Pajari\xf1o","title":"CS Student, Developer, and Tech Enthusiast","url":"https://github.com/yagopajarino","imageURL":"/img/ape.png","key":"yago"}],"frontMatter":{"title":"Criptograf\xeda | Hello Cryptography","authors":"yago","tags":["pse","zk","cryptography"]},"unlisted":false,"prevItem":{"title":"Criptograf\xeda | Encriptando cosas","permalink":"/2024/07/26/encriptando-cosas"},"nextItem":{"title":"Hello World","permalink":"/2024/06/17/hello-world"}},"content":"Notas, recursos y pensamientos con todo lo necesario para iniciar en el mundo de la criptograf\xeda programable.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Hello World\\n\\nHace un mes aprox me confirmaban que iba a ser parte del [PSE Core Program](https://pse.dev/en/programs). Un programa de la Ethereum Foundation de 8 semanas que busca educar en criptograf\xeda a estudiantes universitarios.\\n\\nLa semana que viene arranca el PSE Core Program y esta semana (week 0) nos introducimos al mundo de las ZK proofs y asentamos algunas bases. Mi idea es ir presentando algunos temas y dejando algunas reflexiones semana a semana. No solo me sirve a mi para asentar conocimientos, sino tambi\xe9n puede servir para aquellos que est\xe9n interesados en el tema.\\n\\n:::info\\nMi idea es hacer una serie de post de criptograf\xeda con temas que me interesen. Los vas a poder identificar por el prefijo **Criptograf\xeda |** en el t\xedtulo.\\n:::\\n\\nA veces pienso que est\xe1 todo creado, que ya nada puede ser inventado, y luego aparecen cosas como las zk proofs que te dejan pensando \\"c\xf3mo algo as\xed puede ser posible?\\"\\n\\nAlgo parecido me pas\xf3 la primera vez que escuch\xe9 sobre bitcoin y peor a\xfan cuando le\xed el [paper](https://bitcoin.org/bitcoin.pdf).\\n\\nY si no te interesa, por lo menos lee este post que te va a dejar volando la cabeza, y si te llam\xe1s Nacho: **\'Nacho, \xa1agarrate los pantalones!\'**\\n\\n![alt text](nacho.gif)\\n\\n## \xbfDonde est\xe1 Wally?\\n\\nDonde est\xe1 Wally es un libro que tiene im\xe1genes como la de abajo (un quilombo de gente y cosas basicamente) y en la que tu objetivo es encontrar a Wally, un npc en toda regla.\\n\\n![alt text](image-2.png)\\n\\nSi de pibe lo conociste y lo jugaste, seguro hayas pasado un buen rato buscandolo, m\xe1s del que te gustar\xeda admitir.\\n\\nQuiz\xe1s en alg\xfan momento llegaste a pensar si Wally realmente estaba en la imagen o el libro/autor/editorial te estaba cagando.\\n\\n### Wally a juicio\\n\\nImaginate que sos el hijo de un abogado y le dec\xeds a tu viejo que Wally no est\xe1 en el libro que te compraron, obvio tu viejo lleva a Wally (a la editoria) a juicio.\\n\\nEl jucio es bien f\xe1cil, la editorial tiene que probar que Wally se encuentra en la p\xe1gina en la que estabas jugando. Pero hay algo m\xe1s: como vos no quer\xe9s que te caguen la sorpresa, la editorial no puede revelar en que posici\xf3n de la p\xe1gina se encuentra Wally.\\n\\n### Wait... Wtf?\\n\\nDemostrar que Wally est\xe1, pero sin decir donde est\xe1? Parece imposible, pero el abogado defensor adem\xe1s de abogado es un entusiata matem\xe1tico (nada m\xe1s alejado de la realidad).\\n\\nSe le ocurre lo siguiente, poner una gran s\xe1bana con un agujero bien chiquito en el centro. Detras de la s\xe1bana, colocar la p\xe1gina del libro, alineando justo la cara de Wally con el agujero de la s\xe1bana.\\n\\nPresenta este _set up_ en el juicio y mirando por el agujero, tu viejo se de que Wally est\xe1 en la p\xe1gina, y adem\xe1s no revela en que parte de la p\xe1gina est\xe1 para que vos puedas jugar a encontrarlo.\\n\\nEste es el ejemplo can\xf3nico de una Zero Knowledge Proof.\\n\\n:::info\\nSi no encontraste a Wally, est\xe1 arriba a la derecha.\\n:::\\n\\nAc\xe1 van otros experimentos mentales:\\n\\n1. [Two balls and the colour-blind friend](https://en.wikipedia.org/wiki/Zero-knowledge_proof#Two_balls_and_the_colour-blind_friend)\\n2. [The Ali Baba cave](https://en.wikipedia.org/wiki/Zero-knowledge_proof#The_Ali_Baba_cave)\\n\\n## ZK Proofs\\n\\nAhora s\xed, de lleno en ZK. Espero que los ejemplos anteriores te hayan motivado y ahora est\xe9s en modo \\"Ohhh ok... interesante\\".\\n\\n**Una Zero Knowledge Proof es un m\xe9todo criptogr\xe1fico para probar que algo es cierto, sin revelar ning\xfan tipo de informaci\xf3n extra.**\\n\\nOtro ejemplo can\xf3nico de lo que NO es una ZK Proof podr\xeda ser el caso en que con tus 18 a\xf1os reci\xe9n cumplidos, vas a un boliche con tus amigos. Llleg\xe1s a la puerta y el guardia te pide el DNI. En realidad lo que busca es validar que sos mayor de 18 a\xf1os para poder entrar. Pero en ese proceso, adem\xe1s de verificar tu edad, le **revelas otros datos sensibles como tu n\xfamero de documento y tu direcci\xf3n**.\\n\\nEn realidad, en ese momento solo quer\xe9s demostrar que sos mayor de 18, sin revelar ning\xfan tipo de informaci\xf3n extra, una ZK proof ser\xeda ideal.\\n\\nEn toda ZK existen dos tipos de personas: un _prover_ aquel que quiere probar algo, y un _verifier_, aquel que verifica si el _statement_ del prover el verdadero.\\n\\n### Propiedades\\n\\nMi idea no era meterme en teor\xeda, pero es obligatorio nombrar las tres propiedades que tiene que cumplir una ZK proof:\\n\\n1. **Completeness**: Si un statement es verdadero, el prover debe poder convencer al verifier de que el statement es verdadero. Muchas veces implica que la probabilidad de dar algo como verdadero siendo falso sea muy baja.\\n2. **Soundness**: Si un statement es falso, no existe un prover enga\xf1oso que pueda convencer al verifier de que la declaraci\xf3n es verdadera, de nuevo con un margen de error muy peque\xf1o.\\n3. **Zero Knowledge**: Si el statement es verdadero, el verifier no aprende nada m\xe1s que este hecho.\\n\\n:::info\\nSi quer\xe9s saber m\xe1s desde lo te\xf3rico fijate [este blog post](https://blog.cryptographyengineering.com/2014/11/27/zero-knowledge-proofs-illustrated-primer/)\\n\\nTe recomiento que intentes entender c\xf3mo se prueba la \xfaltima propiedad.\\n:::\\n\\n### Interactive vs non-interactive\\n\\nEsta es una categorizaci\xf3n que me parece interesante. Si pudiste ver los ejemplos de ZK que dej\xe9 arriba, seguro viste el de La Cueva de Alibaba. Seguro viste que la idea de la prueba es ir preguntando varias veces lo mismo como para ver si en alguna de esas preguntas el prover se da una respuesta falsa y podemos determinar que el statement es falso.\\n\\nEsa idea se repite varias veces en un mont\xf3n de ejemplos: imaginate que alguien te dice que es un crack adivinando cosas, como el clima, seguramente la mejor forma de probarlo sea preguntandole todos los d\xedas \xbfC\xf3mo va a estar el clima ma\xf1ana?. Mientras m\xe1s predicciones se cumplan, mayor ser\xe1 tu confianza en que esa persona realmente predice como va a estar el clima.\\n\\nEn ZK es lo mismo, a medida que repetimos experimentos y el prover siempre responde satisfactoriamente, vamos generando confianza en que sabe de lo que est\xe1 hablando, esas son las **interactive proofs**.\\n\\nAhora surge el problema con el que siempre nos encontramos los programadores, se puede mejorar/eficientizar eso? Tener que repetir muchas veces un experimento para convencernos de que algo es cierto no parece muy econ\xf3mico (no lo es).\\n\\nDe all\xed surge la necesidad de las **non-interactive** proofs. En estas, por medio de un \xfanico experimento nos podemos convencer de que el statement es cierto.\\n\\nAc\xe1 otra vez un ejemplo can\xf3nico que a mi me sorprendi\xf3 una banda cuando lo le\xed: [Zero-Knowledge Proof For Sudoku Using Standard Playing Cards](https://www.wisdom.weizmann.ac.il/~naor/PAPERS/SUDOKU_DEMO/). Dale, anda a leerlo y despu\xe9s volv\xe9.\\n\\nEste ejemplo es _non-interactive_ porque el prover y el verifier solo se intercambian un mensaje, que alcanza para probar que el tablero del sudoku est\xe1 completo.\\n\\n:::info\\n\\n- Interactive -> varios intercambios de mensajes entre prover y verifier\\n- Non-interactive -> con un solo mensaje alcanza para hacer la prueba\\n  :::\\n\\n## Casos de uso\\n\\nHay un post muy bueno de casos de uso de ZK proofs en Ethereum: [Use-cases for zero-knowledge proofs](https://ethereum.org/en/zero-knowledge-proofs/#use-cases-for-zero-knowledge-proofs) as\xed que como el post se me est\xe1 alargando bastante voy a dejar que lo revises por tu cuenta.\\n\\nAdem\xe1s en el \xfaltimo tiempo se estuvo trabajando en el desarrollo de [zk-rollups](https://ethereum.org/es/developers/docs/scaling/zk-rollups/) que permiten usar ZK para validar las transacciones de una [Layer 2](https://ethereum.org/en/layer-2/), permitiendo escalar Ethereum.\\n\\nPero m\xe1s a\xfan, Aztec est\xe1 desarrollando lo que llaman [ZK-ZK-Rollup](https://azt3c-st.webflow.io/blog/aztecs-zk-zk-rollup-looking-behind-the-cryptocurtain) (sostienen que las actuales zk rollups no son tan zk), permitiendo ocultar todos los inputs y outputs de una transacci\xf3n en la blockchain. Yo me qued\xe9 as\xed cuando lo escuch\xe9 \ud83e\udd2f\\n\\nSi quer\xe9s saber m\xe1s, mirate [esta charla de Santiago Palladino](https://youtu.be/f1AD_pbBRCM?t=6664)\\n\\n## \xbfC\xf3mo me meto en este mundo?\\n\\nEn principio ten\xe9s que saber algunas cosas matem\xe1ticas bastante simples. Yo te voy a tirar algunos temas como para que bayas googleando\\n\\n1. N\xfameros primos\\n2. Factorizaci\xf3n de enteros\\n3. Aritm\xe9tica modular\\n4. Grupos y generadores\\n5. Algo de programaci\xf3n general\\n\\nPara la parte de programaci\xf3n, te recomiendo como siempre el [CS50 de Harvard](https://www.edx.org/cs50) que es un poco largo pero vale la pena 100%.\\n\\nDespues de eso, lenguajes de programaci\xf3n hay muchos, pero recomiendo que sepas algo de Javascript: [este curso de freecodecamp](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures-v8/) puede ser una buena opci\xf3n.\\n\\nEn cuanto a lo matem\xe1tico, si bien es un poco m\xe1s dificil de aprender online, te puedo recomendar dos cosas buenas que nos dejo la pandemia:\\n\\n1. El fasciculo 9, material de la materia \xc1lgebra I de las carreras de exactas de la UBA. [Ac\xe1 est\xe1](https://cms.dm.uba.ar/depto/public/grado/fascgrado9.pdf)\\n2. [Este canal de youtube](https://www.youtube.com/@AlgebraIC-gu7oc) que tiene todas las clases del primer cuatrimestre 2021\\n\\nCreo que con el cap\xedtulo 3 y 4 del fasc\xedculo 9 deber\xeda ser sufuciente base algebr\xe1ica, pero si ten\xe9s tiempo y ganas estudialo todo que est\xe1 buen\xedsimo.\\n\\nSalu2."},{"id":"/2024/06/17/hello-world","metadata":{"permalink":"/2024/06/17/hello-world","source":"@site/blog/2024-06-17-hello-world/index.md","title":"Hello World","description":"Hola, Hello, \u4f60\u597d, \u0928\u092e\u0938\u094d\u0924\u0947, Bonjour. Si ca\xedste por primera vez en el blog, pasa que te cuento un poco m\xe1s.","date":"2024-06-17T00:00:00.000Z","tags":[{"inline":false,"label":"Hello","permalink":"/tags/hello","description":"Hello tag description"}],"readingTime":2.62,"hasTruncateMarker":true,"authors":[{"name":"Yago Pajari\xf1o","title":"CS Student, Developer, and Tech Enthusiast","url":"https://github.com/yagopajarino","imageURL":"/img/ape.png","key":"yago"}],"frontMatter":{"title":"Hello World","authors":"yago","tags":["hello"]},"unlisted":false,"prevItem":{"title":"Criptograf\xeda | Hello Cryptography","permalink":"/2024/07/19/hello-crypto"},"nextItem":{"title":"Mejorando la UX de Cocos \ud83e\udd65","permalink":"/2024/02/26/cocos-ux"}},"content":"**Hola, Hello, \u4f60\u597d, \u0928\u092e\u0938\u094d\u0924\u0947, Bonjour**. Si ca\xedste por primera vez en el blog, pasa que te cuento un poco m\xe1s.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Welcome\\n\\nEsta es la segunda iteraci\xf3n de mi blog personal, quiz\xe1s hayas pasado alguna vez por la [versi\xf3n Notion](https://yagopajarino.notion.site/Blog-Yago-Pajari-o-aebd1e717424427c8003cca0cebaa131). Esta nueva iteraci\xf3n decid\xed desarrollarla con [docusaurus](https://docusaurus.io/docs) porque me parece m\xe1s amigable, adem\xe1s quer\xeda romper la atadura con Notion y deployar algo basado Open Source y customizable.\\n\\nLa idea es que este post est\xe9 pineado al tope de la lista de post (todav\xeda estoy viendo como hacerlo) como para que cualquiera que entre por primera vez sepa qu\xe9 es este sitio, qui\xe9n soy yo y pueda de alguna forma imaginar qu\xe9 pueden encontrar.\\n\\n## Motivaci\xf3n\\n\\nMe gusta aprender, corta. Recuerdo que de chico, entre cap\xedtulos de los Power Rangers, El Labortatorio de Dexter, Zack & Cody y Patito Feo (why not), ve\xeda en la TV P\xfablica el programa [Alterados por PI](https://www.youtube.com/watch?v=MjYrmDl_KtE). Tambi\xe9n me acuerdo que un d\xeda (ten\xeda 7 u 8 a\xf1os) paseando en alguna librer\xeda le ped\xed a mi madre que me compre un libro, [matematica\u2026 \xbfestas ahi? 2](https://sigloxxieditores.com.ar/libro/matematica-estas-ahi-2/). Imaginate, para una madre, que el pibe le pida un libro de matem\xe1tica, me lo compr\xf3 al toque. Llegu\xe9 a casa, lo empec\xe9 a leer, no entend\xed nada. El libro estuvo tirado m\xe1s de 10 a\xf1os en casa. Un d\xeda lo encontr\xe9 y le di una oportunidad, me fascin\xf3, fue algo medio revelador, yo ten\xeda 20 a\xf1os y estaba mediando la carrera de administraci\xf3n de empresas.\\n\\nDesde ese momento me puse a investigar sobre matem\xe1tica, estad\xedstica, datos. Estaba de moda as\xed que los recursos estaban, hice el curso de data science en Digital House el segundo cuatrimestre de 2018. Excelente curso. Me abri\xf3 las puertas de python, an\xe1lisis de datos y machine learning. Al a\xf1o siguiente me gradu\xe9 en Administraci\xf3n de Empresas.\\n\\nEn ese momento me di cuenta de que quer\xeda dedicarme a la tecnolog\xeda. El mundo de python, los datos y los algoritmos de machine learning me hab\xedan sorprendido pero sent\xeda que me faltaba mucha l\xf3gica, matem\xe1tica, estad\xedstica, algoritmia y una larga lista de etc.\\n\\nDespu\xe9s de un buen research, todav\xeda joven, con ganas y energ\xeda, tom\xe9 probablemente una de las mejores decisiones de mi vida: me anote en **Ciencias de la Computaci\xf3n en UBA**. Arranqu\xe9 a cursar en febrero 2020, me hab\xeda recibido en diciembre 2019.\\n\\nEn 2021, saliendo de pandemia, curse \xe1lgebra I. Otro momento revelador. Siembre hab\xeda visto la matem\xe1tica de la secundaria y la universidad como algo algor\xedtmico, del tipo me memorizo la forma de resolver los ejercicios y voy al parcial con eso. Esa cursada, del primer a\xf1o de la carerra, me sirvi\xf3 para ver la matem\xe1tica como una herramienta muy poderosa para resolver problemas.\\n\\nEse quiz\xe1s fue el punto en el que entend\xed lo importante de la divulgaci\xf3n. Muchos profesores, dir\xeda todos, se dedican a divulgar conocimiento en las aulas. Aquellos que pueden, escriben libros, dan charlas. Aquellos que pueden m\xe1s investigan y generan conocimiento.\\n\\nPor ahora **esta es mi forma de divulgar**. En este blog escribo sobre ciencia y tecnolog\xeda, cosas que aprendo, cosas que me gustar\xeda ver, pensamientos, etc.\\n\\n**Stay curious**"},{"id":"/2024/02/26/cocos-ux","metadata":{"permalink":"/2024/02/26/cocos-ux","source":"@site/blog/2024-02-26-cocos-ux/index.md","title":"Mejorando la UX de Cocos \ud83e\udd65","description":"C\xf3mo mejorar la User Experience de Cocos Capital con 100 lineas de Vanilla Js.","date":"2024-02-26T00:00:00.000Z","tags":[{"inline":true,"label":"problem solving","permalink":"/tags/problem-solving"},{"inline":true,"label":"frontend","permalink":"/tags/frontend"},{"inline":true,"label":"programming","permalink":"/tags/programming"}],"readingTime":3.175,"hasTruncateMarker":true,"authors":[{"name":"Yago Pajari\xf1o","title":"CS Student, Developer, and Tech Enthusiast","url":"https://github.com/yagopajarino","imageURL":"/img/ape.png","key":"yago"}],"frontMatter":{"title":"Mejorando la UX de Cocos \ud83e\udd65","authors":"yago","tags":["problem solving","frontend","programming"],"image":"/img/portadas/cocos.png","hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Hello World","permalink":"/2024/06/17/hello-world"},"nextItem":{"title":"Race Ceremony","permalink":"/2023/08/16/race-ceremony"}},"content":"C\xf3mo mejorar la User Experience de Cocos Capital con 100 lineas de Vanilla Js.\\n\\n\x3c!-- truncate --\x3e\\n\\nSi vos tambi\xe9n est\xe1s manija del bullmarket con el cambio de gobierno, habr\xe1s averiguado formas de invertir tu plata y quiz\xe1s te hayas encontrado con Cocos Capital, que permite comprar y vender productos financieros sin comisiones (no es chivo) (por ahora).\\n\\nHace un par de meses vengo usando la web de cocos para invertir parte de mis ingresos. Casi al toque de empezar a usarla encontr\xe9 algo que se puede mejorar a nivel experiencia (personal) de usuario. La secci\xf3n de mercado, que permite ver todos los activos con su precio, volumen, variaci\xf3n, etc. no se puede ordenar por ninguna de estas variables.\\n\\nEn mi caso, por ejemplo me interesaba ver cual es el activo con mayor volumen operado, cantidad de operaciones o el que tiene la mayor variaci\xf3n en el precio.\\n\\n:::tip\\nEl volumen operado ayuda a prevenir riesgos de liquidez: el riesgo de comprar un activo y luego no poder venderlo porque nadie te lo quiera comprar \ud83e\udd72\\n:::\\n\\nEl desaf\xedo entonces era desarrollar un script que permitiera ordenar el panel de instrumentos por cualquiera de las variables que se muestran: precio, variaci\xf3n, cajas de puntas comprador y vendedor, precio m\xednimo, m\xe1ximo, total operado, cantidad de operaciones; de forma ascendente y descendente. Hacerlo en VanillaJS para poder integrarlo directamente en el navegador web.\\n\\nCon aprox 100 lineas de Vanilla JavaScript se puede lograr. El video est\xe1 disponible en [este post de LinkedIn](https://www.linkedin.com/feed/update/urn:li:activity:7137816305012781056/)\\n\\nEl c\xf3digo es open source y est\xe1 disponible en [cocos-order-panel |\xa0Github](https://github.com/yagopajarino/cocos-orden-panel)\\n\\n## C\xf3mo\\n\\nLa idea es profundizar acerca de c\xf3mo lograr lo anterior. Si ven\xeds de LinkedIn, habr\xe1s visto que lo de arriba es el post que acompa\xf1a a [esta publicaci\xf3n](https://www.linkedin.com/feed/update/urn:li:activity:7137816305012781056/)\\n\\nSi viste el video, lo que hago es copiar el codigo del repositorio y pegarlo en la consola que google chrome. Cada pagina web a la que accedemos carga lo que se conoce como DOM que el navegador se encarga de mostrar en la pantalla.\\n\\n:::tip\\nDOM (Document Object Model) es la representaci\xf3n de la estructura de la web en un \xe1rbol que permite conectarla scripts\\n:::\\n\\nEntonces gracias a la interfaz que provee el DOM, se puede cargar un script a la web y que este lo interprete y ejecute.\\n\\n## Algoritmo\\n\\nEl algoritmo debe:\\n\\n1. Hallar todos los titulos de columnas de la tabla de instrumentos\\n2. Agregar un eventListener a cada titulo de columna\\n   1. Cuando se haga click debe ordenar todas las filas en base al titulo seleccionado\\n   2. Debe hacerlo primero de forma ascendente y luego descendente\\n\\nPara ello hay que estudiar como est\xe1 estructurada la web de cocos, viendo el HTML, todos los titulos de columna comparten la clase `markets-table-header` luego usando `document.querySelector(\\".markets-table-header\\");` se obtiene un array con los headers de las columnas.\\n\\nLo que sigue es a cada uno de esos elementos agregar un eventListener que dada una columna:\\n\\n1. identifique que numero de columna se clickeo\\n2. obtenga todas las filas de la tabla\\n3. ordene todas las filas de la tabla en base al numero de columna\\n4. borre todas las filas de la tabla\\n5. agregue las filas de la tabla de forma ordenada\\n\\nEsta es la parte mas complicada del proceso porque hay que identificar que columna se clickeo usando el titulo, idnetificar que numero de columna tiene este titulo, obtener todos los datos de esa columna, ordenar las filas y presentar.\\n\\nLas linea 6 a 91 se encargan de todo este proceso (el 68% del c\xf3digo)\\n\\n:::tip\\nLa idea central es entender como est\xe1 estructurado el HTML para poder identificar en donde aplicar el listener y como se pueden extraer los datos necesarios para los calculos\\n:::\\n\\n_Go for esos cocos_\\n\\nEl c\xf3digo es open source y est\xe1 disponible en [cocos-order-panel |\xa0Github](https://github.com/yagopajarino/cocos-orden-panel)"},{"id":"/2023/08/16/race-ceremony","metadata":{"permalink":"/2023/08/16/race-ceremony","source":"@site/blog/2023-08-16-race-ceremony/index.mdx","title":"Race Ceremony","description":"Notas de mi primer kata publicado en codewars.","date":"2023-08-16T00:00:00.000Z","tags":[{"inline":true,"label":"algebra","permalink":"/tags/algebra"},{"inline":true,"label":"problem solving","permalink":"/tags/problem-solving"},{"inline":true,"label":"codewars","permalink":"/tags/codewars"}],"readingTime":8.45,"hasTruncateMarker":true,"authors":[{"name":"Yago Pajari\xf1o","title":"CS Student, Developer, and Tech Enthusiast","url":"https://github.com/yagopajarino","imageURL":"/img/ape.png","key":"yago"}],"frontMatter":{"title":"Race Ceremony","authors":"yago","tags":["algebra","problem solving","codewars"],"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Mejorando la UX de Cocos \ud83e\udd65","permalink":"/2024/02/26/cocos-ux"},"nextItem":{"title":"La Conjetura de Thor \ud83d\udc36","permalink":"/2023/04/02/conjetura-thor"}},"content":"Notas de mi primer kata publicado en codewars.\\n\\n\x3c!-- truncate --\x3e\\n\\nVuelvo al blog. El primer cuatrimestre 2023 fue intenso: cambio de trabajo, facultad, novia \ud83e\udd17. En este segunda parte del a\xf1o tengo como objetivo escribir algo todas las semanas, hay un gran backlog de temas as\xed que si no hay nuevos posts ser\xe1 exclusivamente por falta de tiempo \ud83e\udd72\\n\\n## Introducci\xf3n\\n\\nEl a\xf1o pasado, intentando generar un pedacito de c\xf3digo nuevo todos los d\xedas, me propuse resolver un problema de c\xf3digo por d\xeda durante 90 d\xedas (al principio fueron 60 pero la emoci\xf3n lo llevo a 90). Algo de eso en [60 days ok kata](https://github.com/yagopajarino/60-days-of-kata).\\n\\nCodewars es una plataforma que permite a usuarios resolver problemas de programaci\xf3n, algo as\xed como un dojo de karate, cada problemita se llama _kata_ y hay de distintos temas y niveles. Si como yo, usted cree que la pr\xe1ctica hace la perfecci\xf3n, codewars es \xc9L lugar para practicar c\xf3digo y problem solving.\\n\\nAl final del challenge me hab\xeda hecho muy amigo de la plataforma, _after all_ la usaba todos los d\xedas. Fue por una de esas que se me ocurri\xf3 contribuir de otro forma: proponiendo nuevos katas en lugar de resolverlos.\\n\\nAs\xed fue como, volviendo a algunos ejercicios de la facultad y con un poco de ingenio y _storytelling_ naci\xf3 [Race Ceremony | Codewars](https://www.codewars.com/kata/62cecd4e5487c10028996e04/)\\n\\nLa idea de esta post es compartir las dificultades del problema, el proceso de resoluci\xf3n y una posible soluci\xf3n.\\n\\n## Descripci\xf3n del problema\\n\\nEl problema es algo as\xed (en codewars est\xe1 en ingl\xe9s pero ac\xe1 va en castellano):\\n\\n```txt\\nLa competencia nacional de karting tiene lugar en tu ciudad y te llamaron para construir el podio de ganadores con los bloques de madera disponibles. Gracias a que viv\xeds en una zona maderera, la cantidad de bloques disponibles es siempre al menos 6.\\n\\nRecord\xe1 que un podio de ganadores tiene tres plataformas para las tres primeras posiciones, donde el primer lugar es el m\xe1s alto y el segundo es m\xe1s alto que el tercero, adem\xe1s ser ordenan 2do - 1ro - 3ro (Ver imagen)\\n\\nLos organizadores quieren un podio que cumpla:\\n1) El primer lugar tenga altura m\xednima\\n2) El segundo lugar tenga altura lo m\xe1s cercana posible al primero, o lo que es igual, que la diferencia de altura entre el primer y segundo lugar sea m\xednima\\n3) Todas las plataformas tengan altura mayor a cero\\n\\nYour misi\xf3n, should you choose to accept it, es determinar la cantidad de bloques de madera a utilizar en las plataformas del podio, ordenadas 2do, 1ro, 3ro.\\n```\\n\\n## Entendiendo el problema\\n\\nCualquiera que haya visto una carrera habr\xe1 visto un podio de ganadores, la imagen de la portada sirve como aproximaci\xf3n: se tienen tres plataformas para los primeros tres puestos de la carrera con distintas alturas dependiendo la posici\xf3n, obviamente el 1er puesto el m\xe1s alto y el 2do m\xe1s alto que el 3ro.\\n\\nEn el problema nos dicen que las plataformas se van a realizar con bloques de madera apilados, suponemos que son todos iguales. Tambi\xe9n nos dicen que siempre ser\xe1n a lo sumo 6, ok.\\n\\nLo que puede llamar la atenci\xf3n y agregar algo de dificultad son las \u2728condiciones\u2728\xa0que piden los organizadores. Ya no alcanza con agarrar los bloques y armar cualquier podio que cumpla con las alturas, sino que piden un podio espec\xedfico, aquel que cumpla a la vez las tres condiciones que se mencionan.\\n\\nAc\xe1 es donde sirve arrancar a armar ejemplos para ver qu\xe9 es lo que se pide e intentar encontrar un algoritmo para resolverlo.\\n\\nImaginemos que tenemos 6 bloques, podr\xedamos hacer un pod\xedo que tenga 5 bloques para el 1ro, uno para el 2do y ninguno para el 3ro\\n\\n![imagen](./podio1.jpeg)\\nCon 6 bloques sin restricciones se puede armar un podio 1,5,0\\n\\nSin emgargo, se ve facilmente que este podio no cumple con la \xfaltima condici\xf3n: todas las posiciones tienen que tener altura mayor a cero.\\n\\nPodemos solucionarlo sacando un bloque de 1ro y asignandolo a 3ro. Sin embargo es f\xe1cil ver que esto rompe las alturas porque 2do y 3ro quedar\xedan ambos con altura 1. Hay que sacar uno m\xe1s de 1ro y agregarlo a 2do.\\n\\n![imagen](./podio3.jpeg)\\n\\nPasando un bloque de 1ro a 3ro rompe las alturas (y deja una forma poco amigable)\\n\\n![imagen](./podio2.jpeg)\\n\\nPasando un bloque m\xe1s de 1ro a 2do queda como necesitamos\\n\\nAl finalizar estos dos movimientos, queda un podio con alturas 2,3,1 que cumple las tres condiciones.\\n\\nA medida que se agregan bloques, deja de ser tan claro como dividirlos para cumplir con las tres condiciones.\\n\\nVeamos por ejemplo el caso de 10 bloques. Podriamos armar un podio que tenga alturas 2,7,1 que cumple las condiciones de alturas para las posiciones y que todas son mayores a 0.\\n\\nSin embargo tambi\xe9n nos piden que la altura del 1er puesto sea m\xednima y que la diferencia de altura entre 1ro y 2do tambi\xe9n sea m\xednima.\\n\\nLa cosa ahora es ver como podemos chequear que una altura es m\xednima, antes pod\xedamos ver el dibujo y darnos cuenta si cumpl\xeda las condiciones, ahora ya no es posible.\\n\\nAltura m\xednima, cuando nos dicen que algo es m\xednimo tambi\xe9n nos dicen que cualquier otra cosa es m\xe1s grande que ese m\xednimo. Entonces para probar que la altura del primer puesto es m\xednima debemos probar que no existe ning\xfan otro podio que tenga altura menor.\\n\\nVolviendo a los 10 bloques, si encontramos alg\xfan podio que tenga altura de primer lugar menor a 7 podremos decir que 7 no es la altura m\xednima. Si por ejemplo pasamos un bloque de 1ro a 2do, nos queda 3,6,1. Si ahora pasamos uno de 1ro a 3ro nos queda 3,5,2 y ya no podemos seguir cambiando bloques. 3,5,2 parece un buen candidato a cumplir con las tres condiciones.\\n\\nParece que la altura no puede ser menor a 5, pues dado que tenemos 10 bloques, si dividimos los 10 bloques en 3 nos queda 3,33 bloques y si queremos que el 1er puesto sea m\xe1s grande que los otros dos necesariamente debemos sumar dos bloques a esa primera divisi\xf3n.\\n\\nQueda verificar la segunda condici\xf3n, que la diferencia de altura entre 1ro y 2do sea m\xednima. Igual que antes, vemos si no existe alguna combinaci\xf3n que logre reducir esta diferencia.\\n\\nVolvamos al momento en que ten\xedamos 3,6,1. Si volvemos a mover un bloque de 1ro a 2do nos queda 4,5,1\\n\\n![imagen](./podio4.jpeg)\\n\\nEn este caso, la altura de 1ro sigue siendo 5 (m\xednima), y se redujo la diferencia de altura entre 1ro y 2do a un bloque. Esta configuraci\xf3n cumple con todas las condiciones pedidas.\\n\\nTodav\xeda no se ve un muy claro un algoritmo que pueda resolver el problema cumpliendo todas las condiciones.\\n\\n## A bit of \xe1lgebra\\n\\nS\xed, el problema est\xe1 inspirado en un problema de \xe1lgebra que me tomaron en la facultad. Lo primero que hay que ver es que la cantidad de bloques no est\xe1 acotada, puede ser cualquier cosa (incluso n\xfameros muy grandes). Cualquier algoritmo que itere sobre la cantidad de bloques puede ser muy costoso.\\n\\nVeamos el siguiente algoritmo. Nos dan los bloques y los dividimos en tres pilas iguales. Tendr\xedamos un podio con las tres plataformas iguales, no sirve.\\n\\nPor ejemplo, con 6 bloques, dividimos los bloques en 3 grupos iguales y nos quedan 3 plataformas con 2 bloques cada una y no sobran bloques. Para arreglar las alturas, podemos pasar un bloque de 3ro a 1ro y nos queda la combinaci\xf3n 2,3,1 que es soluci\xf3n de 6 bloques.\\n\\nCon 7 bloques, nos quedan de nuevo 3 plataformas con 2 bloques cada una y sobra un bloque. Agregamos el que sobra a 1ro y pasamos uno de 3ro a 1ro, nos quedar\xeda la combinaci\xf3n 2,4,1.\\n\\nCon 8 bloques, nos vuelve a quedar 3 plataformas de 2 bloques cada una y sobran dos bloques. Agregamos uno de los que sobran a 1ro y el otro a 2do y listo.\\n\\nCon 9 bloques, armamos tres plataformas de 3 bloques cada una y no sobran bloques.\\n\\nEn este punto creo no conviene seguir haciendo ejemplos para convencerse que hay un patr\xf3n que se repite, al dividir la cantidad de bloques por 3 y ver cuantos sobran, estamos generando una _clase de equivalencia_. Solo nos importa el resto que sobrevive al dividir la cantidad de bloques por 3.\\n\\nPara nuestro algoritmo, tener 6 bloques, 9 o 93 (3\\\\*31) es igual porque en los tres casos el resto al dividirlos por 3 es 0.\\n\\nAs\xed, vamos a tener tres clases de equivalencia:\\n\\n1. Todas las cantidades de bloques que al dividirlas por 3 tengan resto 0\\n2. Todas las cantidades de bloques que al dividirlas por 3 tengan resto 1\\n3. Todas las cantidades de bloques que al dividirlas por 3 tengan resto 2\\n\\nY lo m\xe1s importante, cualquier n\xfamero que nos den siempre va a caer en una (y solo una) de estas clases.\\n\\n## Algoritmo\\n\\nUsando la intuici\xf3n del paso anterior podemos dise\xf1ar el algoritmo. Lo primero que va a hacer es calcular la divisi\xf3n entera de la cantidad de bloques por 3, como hicimos en los ejemplos. Luego dependiendo el resto de la divisi\xf3n va a tomar uno de los tres posibles caminos.\\n\\n```cpp\\n// Implementaci\xf3n del algoritmo en C++\\n\\nvector<int> race_podium(int blocks) {\\n  int cociente = floor(blocks / 3);\\n\\tvector<int> res;\\n\\tif (blocks == 7)          res = {cociente, cociente + 2, cociente -1};\\n  else if (blocks % 3 == 0) res = {cociente, cociente + 1, cociente - 1};\\n  else if (blocks % 3 == 1) res = {cociente + 1, cociente + 2, cociente - 2};\\n  else                      res = {cociente + 1, cociente + 2, cociente - 1};\\n\\n\\treturn res;\\n}\\n```\\n\\n## Conclusiones\\n\\nNo me quiero seguir extendiendo, creo que el post ya qued\xf3 bastante largo. Solo quiero dejar la reflexi\xf3n de lo valioso que es en muchas ocasiones tener conceptos matem\xe1ticos dando vueltas en la mente a la hora de resolver problemas usando c\xf3digo.\\n\\nLa matem\xe1tica, bien ense\xf1ada, ayuda un mont\xf3n a la hora de resolver problemas, de alguna forma moldea la mente para pensar en forma l\xf3gica y algoritmica, encontrar patrones, etc.\\n\\nEn el link a codewars se pueden ver otras soluciones, algunas muy interesantes :)"},{"id":"/2023/04/02/conjetura-thor","metadata":{"permalink":"/2023/04/02/conjetura-thor","source":"@site/blog/2023-04-02-conjetura-thor/index.md","title":"La Conjetura de Thor \ud83d\udc36","description":"Los que me conocen saben que una de mis rutinas favoritas es salir a pasear con mi amigo Thor \ud83d\udc36\xa0(golden retriever de 2 a\xf1os) todos los d\xedas por la noche, normalmente de 2230.","date":"2023-04-02T00:00:00.000Z","tags":[{"inline":true,"label":"math","permalink":"/tags/math"},{"inline":true,"label":"problem solving","permalink":"/tags/problem-solving"}],"readingTime":5.155,"hasTruncateMarker":true,"authors":[{"name":"Yago Pajari\xf1o","title":"CS Student, Developer, and Tech Enthusiast","url":"https://github.com/yagopajarino","imageURL":"/img/ape.png","key":"yago"}],"frontMatter":{"title":"La Conjetura de Thor \ud83d\udc36","authors":"yago","tags":["math","problem solving"],"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Race Ceremony","permalink":"/2023/08/16/race-ceremony"},"nextItem":{"title":"\ud83d\ude8d Linea 152","permalink":"/2023/03/23/bondis-152"}},"content":"\x3c!-- truncate --\x3e\\n\\nLos que me conocen saben que una de mis rutinas favoritas es salir a pasear con mi amigo Thor \ud83d\udc36\xa0(golden retriever de 2 a\xf1os) todos los d\xedas por la noche, normalmente de 22:30 a 23:30.\\n\\n## El juego de los edificios\\n\\nUna de esas noches, mientras caminaba por el barrio y se ocurri\xf3 el siguiente juego:\\n\\n> _Cada edificio tiene un n\xfamero de puerta que lo identifica, en mi barrio son todos de cuatro d\xedgitos. El juego consiste en tomar ese n\xfamero y determinar si usando los cuatro d\xedgitos y las operaciones suma, resta y multiplicaci\xf3n se puede llegar a otro n\xfamero que tenga resto 0 al dividirlo por 10 (o que sea congruente a 0 m\xf3dulo 10)_\\n\\nHay que usar todos los d\xedgitos y cada d\xedgito solo puede ser usado una sola vez.\\n\\nVa un ejemplo. Digamos que est\xe1s caminando por la calle y quer\xe9s jugar. Mir\xe1s el n\xfamero de edificio y ves un 3687 anotado en la puerta.\\n\\n$$\\n3687 \\\\implies (8+7) * 6 *3 = 270 \\\\equiv 0 (10)\\n$$\\n\\nEntonces, como encontraste el 270 a partir del 3687, gan\xe1s un punto y segu\xeds al siguiente edificio.\\n\\n<aside>\\n\ud83d\udca1 Si se encuentra una combinaci\xf3n, se dice que ese n\xfamero es **combinable**\\n\\n</aside>\\n\\nEn este caso, el **3687 es combinable**\\n\\n## La conjetura de Thor\\n\\nAl principio era bastante complicado determinar si un n\xfamero de puerta de edificio era combinable o no, pero despu\xe9s de un par de noches jugando mientras paseaba, empec\xe9 a encontrar algunos patrones que ayudan a darse cuenta f\xe1cil si un n\xfamero lo es.\\n\\nPor ejemplo y quiz\xe1s la m\xe1s intuitiva, si dentro de las cuatro cifras que tengo, hay dos de ellas que suman 10, luego el n\xfamero es combinable. Por ejemplo con el 4671:\\n\\n$$\\n4671 \\\\implies (4+6) * 7 * 1 = 70 \\\\equiv 0 (10)\\n$$\\n\\nUn par de noches m\xe1s tarde, estaba encontrando combinaciones para todos los n\xfameros de puerta que me cruzaba, parec\xeda raro pero funcionaba, as\xed surgi\xf3 **La Conjetura de Thor** que dice as\xed:\\n\\n> _Para todo n\xfamero natural de cuatro cifras, usando todos sus d\xedgitos una sola vez y las operaciones suma, resta, multiplicaci\xf3n se puede encontrar otro n\xfamero tal que al dividirlo por 10 tenga resto cero._\\n\\nYa no me quedaba con los n\xfameros que me cruzaba en la calle, buscaba generalizarlo a todos los n\xfameros de cuatro cifras \ud83e\udd2f\\n\\n## Probando la conjetura\\n\\nPara probar la conjetura se me ocurri\xf3 lo siguiente: defino el conjunto de los naturales de cuatro digitos $NC$ (No Combinables), meto todos los n\xfameros no combinables ah\xed dentro y cuento cuantos elementos tiene $NC$. Luego la conjetura es cierta si la cantidad de elementos en $NC$ es igual a 0.\\n\\nParto asumiendo que todos los n\xfameros de cuatro cifras son no combinables, luego $NC = \\\\{ 1000, 1001, \u2026, 9998, 9999 \\\\}$ y $\\\\#NC = 10*10*10*10 = 10^4 = 10000$\\n\\n<aside>\\n\ud83d\udca1 El s\xedmbolo # se usa para nombrar el cardinal: cantidad de elementos de un conjunto.\\n\\n</aside>\\n\\n### Reglas de combinabilidad\\n\\nHay ciertas reglas que autom\xe1ticamente convierten a un n\xfamero en combinable y bajan el cardinal de $NC$\\n\\n1. Si el n\xfamero contiene 2 digitos iguales es combinables pues $(a-a) * c = 0, \\\\forall a,c \\\\in \\\\mathbb{N}$\\n\\n   $\\\\#NC = 10 * 9 * 8 * 7 = 5040$\\n\\n2. Si el n\xfamero contiene un 0 es combinable pues $0 * c = 0, \\\\forall c \\\\in \\\\mathbb{N}$\\n\\n   $\\\\#NC = 9*8*7*6 = 3024$\\n\\n3. Si el n\xfamero contiene un 5 es combinable. Imaginemos que un n\xfamero tiene al 5 entre sus d\xedgitos y $d_1, d_2, d_3$ los dem\xe1s d\xedgitos que pueden ser cualquiera de $\\\\{ 1,2,3,4,6,7,8,9 \\\\}$. Si elijo dos de esos n\xfameros al azar, me aseguro que:\\n\\n   1. Uno de ellos es par o\\n   2. Ambos son impares y por lo tanto la suma es par pues $a+b = 2k+1 + 2j + 1 = 2k +2j + 2 = 2(k+j+1) \\\\implies a+b$ es par\\n\\n   Por lo tanto $5*p = 5*2k = 10*k \\\\equiv 0 (10), \\\\forall p \\\\equiv 0 (2)$\\n\\n   $\\\\#NC = 8*7*6*5 = 1680$\\n\\nCon estas tres reglas autom\xe1ticamente bajamos la cantidad de candidatos no combinables, de 10000 a 1680.\\n\\nHasta ac\xe1 todas las reglas que se me ocurrieron para bajar la cantidad de no combinables. Lo siguiente que hice fue intentar encontrar un n\xfamero que no sea combinable, eligiendo cifras una a la vez.\\n\\n### En busca del contraejemplo\\n\\nVoy a llamar $d_1, d_2, d_3, d_4$ a los d\xedgitos del n\xfamero, el orden es indistinto. Los d\xedgitos v\xe1lidos son $\\\\{1,2,3,4,6,7,8,9\\\\}$ y no puede haber duplicados.\\n\\n- Si $d1=1$\\n  - $d_2 \\\\in \\\\{2,3,7,8\\\\}$\\n  - Luego quedan 4 d\xedgitos para ubicar en tres posiciones posibles. Hay $\\\\binom{4}{3}$ = 4 elecciones posibles: 378, 278, 238, 237\\n  - Pero $3+7 = 10$ y $2+8=10$.\\n  - Luego todos los n\xfameros que tienen 1 son combinables\\n- Si $d_1=2$\\n  - $d_2 \\\\in \\\\{4,6,7,9\\\\}$\\n  - Usando la misma l\xf3gica de antes: las posibles elecciones son 679, 479, 469, 467\\n    - 679 es combinable pues $6+7+9 - 2 = 20$\\n    - 479 es combinable pues $4+7+9 = 20$\\n    - 469 y 467 son combinables pues $4+6=10$\\n  - Luego todos los n\xfameros que tienen 2 son combinables\\n- Si $d_1 = 3$\\n  - $d_2 \\\\in \\\\{4,6,8,9\\\\}$\\n  - Posibles elecciones: 689, 489, 469, 468\\n    - 689 es combinable pues $6+8+9-3 = 20$\\n    - 489 es combinable pues $8+9+3 = 20$\\n    - 469 y 467 es combinable pues $4+6 = 10$\\n  - Luego todos los n\xfameros que tienen 3 son combinables\\n- Si $d_1 = 4$\\n  - $d_2 \\\\in \\\\{7,8,9\\\\}$\\n  - Solo se puede armar el 4789 pero es combinable pues $(7+8)*4 = 60$\\n  - Luego todos los n\xfameros que tienen 4 son combinables\\n- Si $d_1 = 6$\\n  - $d_2 \\\\in \\\\{7,8\\\\}$\\n  - Pero solo quedan 2 digitos para tres restantes.\\n  - Luego todos los n\xfameros que tienen 6 son combinables\\n\\nEn este punto solo quedan los d\xedgitos $\\\\{7,8,9\\\\}$ para formar un n\xfamero de 4 cifras.\\n\\nPor lo tanto, al no poder generar un n\xfamero que no sea combinable y al barrer todos los casos posibles, pruebo que todos los n\xfameros de cuatro cifras son combinables y la **conjetura de Thor es correcta**."},{"id":"/2023/03/23/bondis-152","metadata":{"permalink":"/2023/03/23/bondis-152","source":"@site/blog/2023-03-23-bondis-152/index.md","title":"\ud83d\ude8d Linea 152","description":"Data Analysis de la mejor linea de colectivos de Buenos Aires.","date":"2023-03-23T00:00:00.000Z","tags":[{"inline":true,"label":"transport","permalink":"/tags/transport"},{"inline":true,"label":"data analysis","permalink":"/tags/data-analysis"},{"inline":true,"label":"optimization","permalink":"/tags/optimization"}],"readingTime":5.79,"hasTruncateMarker":true,"authors":[{"name":"Yago Pajari\xf1o","title":"CS Student, Developer, and Tech Enthusiast","url":"https://github.com/yagopajarino","imageURL":"/img/ape.png","key":"yago"}],"frontMatter":{"title":"\ud83d\ude8d Linea 152","authors":"yago","tags":["transport","data analysis","optimization"],"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"La Conjetura de Thor \ud83d\udc36","permalink":"/2023/04/02/conjetura-thor"},"nextItem":{"title":"El Funny C\xf3digo Neerlandes","permalink":"/2023/03/15/codigo-neerlandes"}},"content":"Data Analysis de la **mejor** linea de colectivos de Buenos Aires.\\n\\n![image](./152.png)\\n\\n\x3c!-- truncate --\x3e\\n\\n## La mejor l\xednea de bondis CABA\\n\\nSi alguna vez llegaste a conocer la [Avenida Santa Fe](https://es.wikipedia.org/wiki/Avenida_Santa_Fe) de Buenos Aires, o su continuaci\xf3n en Cabildo-Maip\xfa, seguro te cruzaste con uno (o muchos) colectivos de la l\xednea 152 como los de la foto.\\n\\nRecorrido super simple: Olivos - La Boca todo derecho por Paseo Col\xf3n - Leandro N. Alem - Santa Fe - Cabildo - Maip\xfa\\n\\nY seguramente tambi\xe9n habr\xe1s notado que es m\xe1s probable cruzarte tres colectivos uno atr\xe1s del otro que encontrar uno solo. **La frecuencia es 10/10**.\\n\\n## Una tarde sin bater\xeda\\n\\nUna tarde sin bater\xeda en el tel\xe9fono, volviendo de Vicente L\xf3pez, me tomo el 152 y como no ten\xeda el tel\xe9fono para scrollear alguna app, me puse a _divagar_ (super recomendable de vez en cuando) y en una de esas encontr\xe9 este cartel pegado en una pared del bondi:\\n\\n![image](./cronograma.png)\\n\\nYo sab\xeda que la frecuencia era buen\xedsima y medio este cartel lo confirmaba. Entre las 8 y las 19 sale un bondi cada tres minutos, una locura \ud83e\udd2f\\n\\nAs\xed que me pregunt\xe9,\\n\\n> \ud83e\udd14 \xbfCu\xe1ntos bondis ser\xe1n necesarios para poder cubrir todo el cronograma de frecuencias?\\n\\nLe saqu\xe9 una foto al cartel y me llev\xe9 la tarea de intentar responder la pregunta.\\n\\n## Fabricando la respuesta \ud83d\udd27\\n\\nCreo que esa misma noche empec\xe9 a imaginar una respuesta a la pregunta, o al menos, a hacer otras preguntas que me permitan responder la original, como:\\n\\n1. \xbfD\xf3nde est\xe1n las cabeceras del recorrido?\\n2. \xbfCu\xe1nto tarda un colectivo en hacer el recorrido entre cabeceras?\\n3. \xbfC\xf3mo influye el tr\xe1fico en la duraci\xf3n del recorrido?\\n\\nTambi\xe9n me puse a pensar que bien pudo haber sido la misma pregunta que el/los due\xf1os de la empresa se tuvieron que hacer luego de definir el cronograma de frecuencias y por lo tanto, determinar la cantidad **m\xednima** de colectivos que pudieran cumplir con el cronograma era lo mejor para el negocio.\\n\\nEntonces no es solo encotrar una respuesta que sea v\xe1lida, sino que hay una idea de _optimizaci\xf3n_, buscar la m\xednima cantidad de colectivos que cumplen lo pedido.\\n\\n### Respuesta 1: naive\\n\\nLa primer respuesta, la llamo _naive_ (ingenua) es tener un colectivo para cada horario de salida, de esa forma me aseguro tener un colectivo disponible para cada salida en el cronograma.\\n\\nLuego, contando la cantidad de salidas del cronograma, se necesitar\xedan 302 colectivos de ida y 302 colectivos de vuelta, 604 colectivos en total.\\n\\nLe pregunt\xe9 a chat GPT cuanto espacio ocupan 604 colectivos, pensando en que en alg\xfan lugar se tendr\xedan que estacionar:\\n\\n![image](./chat.png)\\n\\nSe necesitar\xedan m\xe1s de tres canchas de futbol para estacionar 604 colectivos, un mont\xf3n. Inviable desde el espacio, adem\xe1s parece l\xf3gico pensar que los colectivos se pueden reutilizar.\\n\\n### Respuesta 2: reutilizando colectivos\\n\\nEsta es la idea m\xe1s l\xf3gica, tengo un colectivo que hace el recorrido de punta a punta y cuando llega al final arranca en sentido contrario.\\n\\nAhora s\xed, para poder usar esta estrategia hay que conocer cu\xe1nto se tarda en hacer el recorrido de punta a punta.\\n\\n#### Cronometrando el recorrido\\n\\nPara poder saber cu\xe1nto tarda un colectivo en hacer el recorrido, bien podr\xeda haberme tomado uno (o varios) colectivos desde la terminal y cronometrar cu\xe1nto tarda en llegar al final del recorrido.\\n\\nEs muy f\xe1cil ver que es un m\xe9todo bastante ineficiente, debe haber algo mejor.\\n\\nHace un tiempo, por otro tema, encontre las [API publicas del GCBA](https://buenosaires.gob.ar/desarrollourbano/transporte/apitransporte) que en particular permiten **ver la posici\xf3n en tiempo real** de los colectivos circulando por la capital/GBA.\\n\\n> \ud83d\udca1 Si tengo la posici\xf3n geogr\xe1fica de los colectivos, puedo calcular cuanto tardan en relizar el recorrido de punta a punta.\\n\\nLa API toma una l\xednea de colectivos y devuelve la posici\xf3n gps (latitud, longitud) de todos los colectivos de esa l\xednea en tiempo real.\\n\\n![Mapa de colectivos l\xednea 152 del 23/01/2023 a las 20:15hs](./mapa.png)\\n\\nMapa de colectivos l\xednea 152 del 23/01/2023 a las 20:15hs\\n\\nEn el mapa se ven los colectivos:\\n\\n- Rojo hacia Olivos\\n- Azul hacia La Boca\\n- Verde en terminal\\n\\n#### Bot the data \ud83e\udd16\\n\\nEsa noche (23/01/2023) me qued\xe9 programando un bot que hiciera lo siguiente:\\n\\n1. Llame a la API del GCBA\\n2. Tome la respuesta y extraiga las posiciones de los colectivos\\n3. Guarde las posiciones en un csv\\n\\nEl bot qued\xf3 corriendo el 24/01/2023 entre las 8 y las 10 y entre las 15 y las 20 horas cada 30 segundos.\\n\\n#### Gimme the data\\n\\nUna vez obtenida toda la informaci\xf3n, en bruto, quedaba analizarla y sacar conclusiones, hab\xeda que responder la pregunta: **\xbfCu\xe1nto tarda un colectivo en realizar el recorrido de punta a punta?**\\n\\nEmpiezo a analizar los datos y me encuentro lo siguiente:\\n\\n![image](./hist.png)\\n\\nOk como esperaba, tengo datos entre las 8 y las 9 y pico; y luego entre las 15 y las 20 horas.\\n\\n![image](./dist.png)\\n\\nEste gr\xe1fico era m\xe1s interesante, me mostraba la distancia en desvios est\xe1ndar a la media de duraci\xf3n del recorrido para cada viaje, seg\xfan el horario de salida (start_datetime).\\n\\nPermit\xeda identificar dos grupos de datos bien claros, los viajes de la ma\xf1ana con duraci\xf3n bastante menor a la media y los de la tarde con duraci\xf3n por encima de la media. Es decir, los colectivos de la ma\xf1ana tardaban menos, influenciado seguramente por el tr\xe1nsito.\\n\\n#### Clusterizando horarios\\n\\nPara no complicarme mucho, divid\xed el horario del recorrido en 3 intervalos:\\n\\n1. poco tr\xe1fico: entre las 22 y las 10\\n2. medio tr\xe1fico: entre las 10 y las 16\\n3. mucho tr\xe1fico: entre las 16 y las 22\\n\\nLuego para el 1er y 3er intervalo pod\xeda usar los datos reales, calcular la media de cada grupo.\\n\\nQuedaba conseguir la duraci\xf3n media para la franja entre las 10 y las 16. Para calcularlo arm\xe9 un regresor lineal simple con los datos, obteniendo:\\n\\n![image](./trafico.png)\\n\\nEn rojo: regresi\xf3n lineal simple aplicada a los datos. La recta roja es la que mejor se ajusta a los datos.\\n\\nY usando el resultado llegue a determinar el tiempo medio de la 2da franja\\n\\nAs\xed, los datos de duraci\xf3n media del recorrido quedaron:\\n\\n1. 22hs - 10hs: 1.64hs\\n2. 10hs - 16hs: 4.02hs\\n3. 16hs-22hs: 4.57hs\\n\\n#### Calculando colectivos\\n\\nAhora quedaba lo m\xe1s f\xe1cil, sabiendo los horarios de partida y la duraci\xf3n del recorrido para cada horario, contar la cantidad de colectivos necesarios.\\n\\nLo simul\xe9 en python:\\n\\n```python\\n# Simulaci\xf3n de un d\xeda de l\xednea 152\\nminuto = 0\\nnecesarios = 0\\nen_terminal = 0\\nen_recorrido = set()\\nsalidas = get_salidas()\\nwhile minuto < 1440:\\n    if hay_llegada(minuto, en_recorrido):\\n        en_recorrido.remove(minuto)\\n        en_terminal += 1\\n    if hay_salida(minuto, salidas):\\n        if en_terminal == 0:\\n            necesarios += 1\\n            en_terminal += 1\\n        agregar_llegada(en_recorrido, tiempo_llegada(minuto))\\n        en_terminal -= 1\\n    minuto += 1\\n```\\n\\nLuego, **hacen falta 81 colectivos, por recorrido, para cumplir con el cronograma de salidas del 152.**\\n\\n### Conclusiones\\n\\nCon la segunda estrategia, se logra bajar la cantidad de colectivos de 604 a 162, bastante mejor :)"},{"id":"/2023/03/15/codigo-neerlandes","metadata":{"permalink":"/2023/03/15/codigo-neerlandes","source":"@site/blog/2023-03-15-codigo-neerlandes/index.mdx","title":"El Funny C\xf3digo Neerlandes","description":"POV est\xe1s scrolleando en twitter cuando de repente","date":"2023-03-15T00:00:00.000Z","tags":[{"inline":true,"label":"computer science","permalink":"/tags/computer-science"},{"inline":true,"label":"algorithms","permalink":"/tags/algorithms"},{"inline":true,"label":"problem solving","permalink":"/tags/problem-solving"},{"inline":true,"label":"memes","permalink":"/tags/memes"}],"readingTime":6.44,"hasTruncateMarker":true,"authors":[{"name":"Yago Pajari\xf1o","title":"CS Student, Developer, and Tech Enthusiast","url":"https://github.com/yagopajarino","imageURL":"/img/ape.png","key":"yago"}],"frontMatter":{"title":"El Funny C\xf3digo Neerlandes","authors":"yago","tags":["computer science","algorithms","problem solving","memes"],"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"\ud83d\ude8d Linea 152","permalink":"/2023/03/23/bondis-152"},"nextItem":{"title":"\xbfQu\xe9 probabilidad hay de obtener el 21% de cashback en Belo?","permalink":"/2023/02/24/belo-cashback"}},"content":"POV est\xe1s scrolleando en twitter cuando de repente\\n\\n![tweet](./tweet.png)\\n\\n\x3c!-- truncate --\x3e\\n\\n**Viral**. Jodas, memes, seriedad, debates de correctitud, complejidad, _readability_ y otros temas que hacen al buen software.\\n\\n[Link al tweet](https://twitter.com/JeroenFrijters/status/1615204074588180481)\\n\\n## Selected responses ;)\\n\\n![tweet](./resp1.png)\\n\\n![tweet](./resp2.png)\\n\\n![tweet](./resp3.png)\\n\\n![tweet](./resp4.png)\\n\\n## Memes\\n\\n![tweet](./meme1.png)\\n\\n![tweet](./meme2.png)\\n\\n### In My Humble Opinion\\n\\nLa cosa nace con un repo al c\xf3digo de alguna aplicaci\xf3n del gobierno neerlandes. Seg\xfan el tweet, obligado a publicarlo. Alg\xfan usuario encontr\xf3 la funci\xf3n `GetPercentageRounds` en [este archivo](https://github.com/MinBZK/woo-besluit-broncode-digid-app/blob/ad2737c4a039d5ca76633b81e9d4f3f9370549e4/Source/DigiD.iOS/Services/NFCService.cs#L182)\\n\\n```cpp\\nprivate static string GetPercentageRounds(double percentage)\\n        {\\n            if (percentage == 0)\\n                return \\"\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\\";\\n            if (percentage > 0.0 && percentage <= 0.1)\\n                return \\"\ud83d\udd35\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\\";\\n            if (percentage > 0.1 && percentage <= 0.2)\\n                return \\"\ud83d\udd35\ud83d\udd35\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\\";\\n            if (percentage > 0.2 && percentage <= 0.3)\\n                return \\"\ud83d\udd35\ud83d\udd35\ud83d\udd35\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\\";\\n            if (percentage > 0.3 && percentage <= 0.4)\\n                return \\"\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\\";\\n            if (percentage > 0.4 && percentage <= 0.5)\\n                return \\"\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\u26aa\u26aa\u26aa\u26aa\u26aa\\";\\n            if (percentage > 0.5 && percentage <= 0.6)\\n                return \\"\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\u26aa\u26aa\u26aa\u26aa\\";\\n            if (percentage > 0.6 && percentage <= 0.7)\\n                return \\"\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\u26aa\u26aa\u26aa\\";\\n            if (percentage > 0.7 && percentage <= 0.8)\\n                return \\"\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\u26aa\u26aa\\";\\n            if (percentage > 0.8 && percentage <= 0.9)\\n                return \\"\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\u26aa\\";\\n\\n            return \\"\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\\";\\n        }\\n```\\n\\nEs muy intuitivo pensar que en lugar de tener tantos `if` se podr\xeda resolver haciendo alg\xfan tipo de c\xe1lculo que relacione el porcentaje y la cantidad de bolitas azules que hay que imprimir.\\n\\n## Handshake \ud83e\udd1d\\n\\nAntes de profundizar en c\xf3mo hacer al algoritmo \u201cmejor\u201d podemos ver el **contrato** que origina el c\xf3digo.\\n\\nImaginemos que somos el rey de Holanda y necesitamos una app. Contratamos una consultora, la consultora tiene un programador, y entre el programador y nosotros generamos un contrato:\\n\\n_\u201dNecesito que me programes la funci\xf3n `GetPercentageRounds` que toma un porcentaje y me devuelva algo que me ilustre el porcentaje de carga\u201d_\\n\\nDe alguna forma, siempre que un cliente pide alg\xfan tipo de software a un programador, implicitamente se firma un contrato. Como en todo contrato, cada parte tiene deberes y obligaciones.\\n\\nPor un lado el cliente se compromete a dar los inputs necesarios al programador y define qu\xe9 es lo que espera obtener con el resultado. Por otro lado el programador tiene la obligaci\xf3n de obtener el resultado a partir del input que le dan.\\n\\n## Correctitud \u2705\\n\\nImaginemos el contrato que firmaron el rey de Holanda con el programador es algo as\xed: yo me comprometo a darte un `percentage` y vos te comprometes a devolverme un texto que ilustre el estado de carga de mi app.\\n\\nMuchas cr\xedticas que se le hac\xedan al algoritmo era que: _\u201csi el porcentaje es menor a cero lo interprata como 100%\u201d_\\n\\nLo cual es claramente un error\u2026 o no. Lo cierto es que no importa como lo interprete, siempre y cuando el contrato haya sido claro en qu\xe9 iba a recibir y qu\xe9 iba a devolver.\\n\\nEn el colegio de programadores esta es la regla de oro: si los par\xe1metros de entrada no cumplen con el contrato que hab\xedamos acordado, no tengo responsabilidad en el resultado que tenga el programa.\\n\\nVolviendo al ejemplo, si el cliente y el programador se hab\xedan puesto de acuerdo en el que el input era un porcentaje definido como:\\n\\n$$\\np \\\\in \\\\mathbb{R} : 0 \\\\leq p \\\\leq 1\\n$$\\n\\n<aside>\\n\u26a1 Usar expresiones matem\xe1ticas y f\xf3rmulas l\xf3gicas evita ambig\xfcedades\\n\\n</aside>\\n\\nY luego alguien llama a la funci\xf3n con un valor de `percentage` que no cumple con lo pactado, no importa, o no est\xe1 definido c\xf3mo debe actuar el algoritmo. BTW parece l\xf3gico pensar en un porcentaje como un n\xfamero entre 0 y 1 (o entre 0% y 100%)\\n\\nAhora imaginemos que la funci\xf3n de la pol\xe9mica se usa as\xed:\\n\\n```cpp\\n// antes de evaluar se pregunta por validez de p\\nprivate static string loading_with_printing() {\\n\\tfloat p = getPorcentageDeCarga()\\n\\tif (p < 0 || p > 1) {\\n\\t\\treturn OtraCosa(p)\\n\\t}\\n\\telse {\\n\\t\\treturn **GetPercentageRounds**(p)\\n\\t}\\n}\\n```\\n\\nEntonces no tendr\xeda sentido, como se propon\xeda en algunas respuestas al tweet, incluir un if dentro de `GetPercentageRounds` que verifique que el par\xe1metro de entrada es $0 \\\\leq p \\\\leq 1$ pues nunca se llegar\xeda a correr la funci\xf3n.\\n\\nPor lo tanto, y ac\xe1 va otra del colegio de programadores, no podemos decir que el c\xf3digo original est\xe1 bien o mal, sino que **depende** del contrato firmado entre el programador y el cliente.\\n\\n## Buenas pr\xe1cticas \ud83e\uddf9\\n\\nLo siguiente que queda es ver si el c\xf3digo cumple con las buenas pr\xe1cticas normalmente definidas al momento de programar.\\n\\n### Readability\\n\\nArranco por esta porque es la m\xe1s f\xe1cil. S\xed, se lee muy f\xe1cil y se entiende muy r\xe1pido qu\xe9 es lo que la funci\xf3n hace. 10/10\\n\\n### Lines of code\\n\\n0/10. Otra _rule of thumb_ de la programaci\xf3n: si ten\xe9s muchas lineas duplicadas o que hacen cosas muy parecidas, hay lugar para achicar.\\n\\nEsta tambi\xe9n es obvia: en vez de hardcodear cada posible escenario y crear una rama `if` para cada uno de ellos, se puede deducir la cantidad de bolitas azules que hay que imprimir en base al porcentaje. En las respuestas hay bastantes _one-line-solution_ que usan esta idea.\\n\\n### Complejidad\\n\\nEsta ya no es tan directa como las otras dos y quizas es m\xe1s sutil. Imaginemos que queremos mantener el 10/10 en readability, se podr\xeda mejorar el c\xf3digo para que sea m\xe1s eficiente.\\n\\nCon eficiente nos referimos a la cantidad de operaciones que tiene que hacer la computadora para obtener un resultado. Normalmente se hace en t\xe9rminos asint\xf3ticos con la [notaci\xf3n Big O](https://www.freecodecamp.org/news/big-o-notation-why-it-matters-and-why-it-doesnt-1674cfa8a23c/)\\n\\nSin embargo no hace falta entrar en tanto an\xe1lisis en este caso. Recuerdo el c\xf3digo:\\n\\n```cpp\\n/* C\xf3digo original */\\nprivate static string GetPercentageRounds(double percentage)\\n        {\\n            if (percentage == 0)\\n                return \\"\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\\";\\n            if (percentage > 0.0 && percentage <= 0.1)\\n                return \\"\ud83d\udd35\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\\";\\n            if (percentage > 0.1 && percentage <= 0.2)\\n                return \\"\ud83d\udd35\ud83d\udd35\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\\";\\n            if (percentage > 0.2 && percentage <= 0.3)\\n                return \\"\ud83d\udd35\ud83d\udd35\ud83d\udd35\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\\";\\n            if (percentage > 0.3 && percentage <= 0.4)\\n                return \\"\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\\";\\n            if (percentage > 0.4 && percentage <= 0.5)\\n                return \\"\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\u26aa\u26aa\u26aa\u26aa\u26aa\\";\\n            if (percentage > 0.5 && percentage <= 0.6)\\n                return \\"\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\u26aa\u26aa\u26aa\u26aa\\";\\n            if (percentage > 0.6 && percentage <= 0.7)\\n                return \\"\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\u26aa\u26aa\u26aa\\";\\n            if (percentage > 0.7 && percentage <= 0.8)\\n                return \\"\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\u26aa\u26aa\\";\\n            if (percentage > 0.8 && percentage <= 0.9)\\n                return \\"\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\u26aa\\";\\n\\n            return \\"\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\\";\\n        }\\n```\\n\\nEn cada `if` la computadora tiene que preguntar si el porcentaje es mayor que un cierto n\xfamero y menor-igual que otro cierto n\xfamero. En el peor de los casos, estar\xe1 preguntando 19 veces (1 en el primero y 2 en cada uno de los 9 if restantes).\\n\\nUna alternativa posible que mejora la cantidad de preguntas es:\\n\\n```cpp\\n/* c\xf3digo alternativa */\\nprivate static string GetPercentageRounds(double percentage)\\n        {\\n            if (percentage == 1)\\n                return \\"\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\\";\\n            else if (percentage >= 0.9)\\n                return \\"\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\u26aa\\";\\n            else if (percentage >= 0.8)\\n                return \\"\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\u26aa\u26aa\\";\\n            else if (percentage >= 0.7)\\n                return \\"\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\u26aa\u26aa\u26aa\\";\\n            else if (percentage >= 0.6)\\n                return \\"\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\u26aa\u26aa\u26aa\u26aa\\";\\n            else if (percentage >= 0.5)\\n                return \\"\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\u26aa\u26aa\u26aa\u26aa\u26aa\\";\\n            else if (percentage >= 0.4)\\n                return \\"\ud83d\udd35\ud83d\udd35\ud83d\udd35\ud83d\udd35\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\\";\\n            else if (percentage >= 0.3)\\n                return \\"\ud83d\udd35\ud83d\udd35\ud83d\udd35\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\\";\\n            else if (percentage >= 0.2)\\n                return \\"\ud83d\udd35\ud83d\udd35\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\\";\\n            else if (percentage >= 0.1)\\n                return \\"\ud83d\udd35\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\\";\\n\\t\\t\\t\\t\\t\\telse\\n\\t            return \\"\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\u26aa\\";\\n        }\\n```\\n\\nEn este caso, en el peor de los casos se realizan 10 preguntas, lo cual mejora la eficiencia del algoritmo sin perder readability.\\n\\n## Conclusi\xf3n\\n\\nSin saber el contrato que dio origen al c\xf3digo no podemos decir si era correcto o no. En principio parece que s\xed lo era (tampoco era tan complejo). Lo que s\xed se pod\xeda analizar y mejorar era la estructura de los if para evitar hacer comparaciones innecesarias.\\n\\nPersonalmente no creo que lo primero que se me ocurra para resolver un problema de este tipo es hardcodear cada posible resultado sino intentar armar alguna funci\xf3n que cuente la cantidad de bolitas azules segun el porcentaje. Pero banco al dutch coder padre de esta obra."},{"id":"/2023/02/24/belo-cashback","metadata":{"permalink":"/2023/02/24/belo-cashback","source":"@site/blog/2023-02-24-belo-cashback/index.mdx","title":"\xbfQu\xe9 probabilidad hay de obtener el 21% de cashback en Belo?","description":"Alguna vez so\xf1aste con ganarte el 21% de cashback en Belo? Pas\xe1 y fijate que tan probable es que lo ganes.","date":"2023-02-24T00:00:00.000Z","tags":[{"inline":true,"label":"probability","permalink":"/tags/probability"},{"inline":true,"label":"data","permalink":"/tags/data"},{"inline":true,"label":"finance","permalink":"/tags/finance"}],"readingTime":4.01,"hasTruncateMarker":true,"authors":[{"name":"Yago Pajari\xf1o","title":"CS Student, Developer, and Tech Enthusiast","url":"https://github.com/yagopajarino","imageURL":"/img/ape.png","key":"yago"}],"frontMatter":{"title":"\xbfQu\xe9 probabilidad hay de obtener el 21% de cashback en Belo?","authors":"yago","tags":["probability","data","finance"],"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"El Funny C\xf3digo Neerlandes","permalink":"/2023/03/15/codigo-neerlandes"},"nextItem":{"title":"Recusi\xf3n","permalink":"/2022/06/30/recursion"}},"content":"Alguna vez so\xf1aste con ganarte el 21% de cashback en Belo? Pas\xe1 y fijate que tan probable es que lo ganes.\\n\\n\x3c!-- truncate --\x3e\\n\\nPreparar un final de probabilidad y estad\xedstica durante un mes motivo preguntarme acerca de la probabilidad de obtener el cashback del 21% de Belo, esencialmente, conocer la distribuci\xf3n de probabilidades de obtener un determinado porcentaje de cashback.\\n\\nBelo, como otros proveedores de servicios cripto, ofrece cashback variable **aleatorio** en cada compra que se realice. Vos compr\xe1s con la tarjeta y ellos te devuelven un porcentaje, entre 2% y 21% del total de la compra.\\n\\nRevisando https://help.belo.app/ encontr\xe9 la respuesta en sus t\xe9rminos y condiciones. Imagino que habr\xe1 una obligatoriedad regulatoria pero no deja de ser buena info a la hora de decidir o no sumarse a la beloneta (u otras criptonetas).\\n\\nAntes de spoilear, vamos a aprovechar para repasar algunos formalismos probabil\xedsticos \ud83d\ude42\\n\\n## Variables aleatorias\\n\\nPor definici\xf3n, una variable aleatoria $f$ asociada a un experimento $X$ es una funci\xf3n\\n\\n$$\\nf_X: A \\\\subseteq \\\\mathbb{R} \\\\to [0,1]\\n$$\\n\\nEs decir una funci\xf3n que a cada valor de un subconjunto real $A$, asigna un valor del intervalo $[0,1]$. Por ejemplo, supongamos que definimos el experimento\\n\\n$X$ : Resultado del lanzamiento de un dado\\n\\nDefinimos nuestro $A=\\\\{1,2,3,4,5,6\\\\}$ el conjunto de los posibles resultados de $X$ tambi\xe9n llamado **rango de la variable aleatoria,** $R_x$\\n\\nPor lo tanto para terminar de definir nuestra variable aleatoria, debemos asignar a cada valor de $A$ uno en $[0,1]$\\n\\nSupongamos que el dado est\xe1 equilibrado, luego cada numero tiene la misma probabilidad de salir. Luego podemos definir nuestra variable aleatoria:\\n\\n$$\\nf_X(x) = \\\\begin{cases}\\n1/6 & x = 1 \\\\\\\\\\n1/6 & x = 2 \\\\\\\\\\n1/6 & x = 3 \\\\\\\\\\n1/6 & x = 4 \\\\\\\\\\n1/6 & x = 5 \\\\\\\\\\n1/6 & x = 6 \\\\\\\\\\n\\\\end{cases}\\n$$\\n\\nPero supongamos que el dado no est\xe1 equilibrado, sino que el 1 y el 2 tienen m\xe1s probabilidad de salir, nuestra variable podr\xeda quedar:\\n\\n$$\\nf_X(x) = \\\\begin{cases}\\n2/6 & x = 1 \\\\\\\\\\n2/6 & x = 2 \\\\\\\\\\n1/12 & x = 3 \\\\\\\\\\n1/12 & x = 4 \\\\\\\\\\n1/12 & x = 5 \\\\\\\\\\n1/12 & x = 6 \\\\\\\\\\n\\\\end{cases}\\n$$\\n\\nEsta funci\xf3n que asigna valores en el $[0,1]$ se llama **funci\xf3n de distribuci\xf3n** de la variable aleatoria y determina las probabilidades de obtener un determinado resultado del experimento asociado a la variable.\\n\\n## Belo y el cashback\\n\\nFormalicemos lo que significa _\u201ccompr\xe1 con la tarjeta y recib\xed un cashback variable entre 2% y 21%\u201d_\\n\\nDefinamos la variable aleatoria $C$ : \u201cPorcentaje de cashback recibido\u201d\\n\\nSabemos que el cashback es un porcentaje entre 2% y 21% pero no sabemos si el intervalo est\xe1 discretizado o es continuo.\\n\\nAc\xe1 entran a la cancha los [TyC](https://help.belo.app/es/articles/7026125-nuevos-terminos-y-condiciones-particulares-plan-de-fidelizacion-de-usuarios-cashback-el-plan). El interavalo 2% - 21% est\xe1 discretizado y por lo tanto los posibles valores de cashback son: 2%, 4%, 6%, 8%, 12%, 21%\\n\\nLuego podemos definir nuestro rango $R_C = \\\\{2,4,6,8,12,21\\\\}$\\n\\nY para terminar de definir nuestra variable aleatoria, tenemos que asignar a cada valor de $R_C$ una proba de ocurrencia en el intervalo $[0,1]$.\\n\\nDe nuevo, los t\xe9rminos y condiciones nos dicen que las probabilidades de ocurrencia de los porcentajes de cashback son:\\n\\n$$\\nf_C(c) = \\\\begin{cases}\\n0.97 & c = 2 \\\\\\\\\\n0.005 & c = 4 \\\\\\\\\\n0.005 & c = 6 \\\\\\\\\\n0.005 & c = 8 \\\\\\\\\\n0.005 & c = 12 \\\\\\\\\\n0.01 & c = 21 \\\\\\\\\\n\\\\end{cases}\\n$$\\n\\nObteniendo la distribuci\xf3n,\\n\\n![proba](./proba.png)\\n\\nS\xed, de cada 100 compras que se hacen con Belo, 97 tienen cashback del 2%, menos de una \xbf? tiene cashback de entre 4% y 12% y solo una tiene el buen 21% de cashback.\\n\\n## Cashback esperado\\n\\nLa siguiente pregunta que podr\xedamos hacernos es: me conviene quedarme en belo con el cashback variable o irme a uno que tenga un cashback fijo $x$?\\n\\nEst\xe1 claro que si otras empresas ofrecen un cashback fijo del 2%, conviene quedarse en Belo porque aunque las probas son bajas, te puede salir un cashback mayor a 2% en alguna compra.\\n\\nQu\xe9 pasa si un competidor ofrece un cashback fijo del 2.5%? Ah\xed ya no es tan claro que me conviene hacer. Para responder podemos calcular la esperanza de nuestra variable aleatoria $C$\\n\\nIntuitivamente, la esperanza nos dice el valor que obtendr\xedamos (o esperar\xedamos obtener) luego de repetir el experimento muchas veces.\\n\\nFormalmente,\\n\\n$$\\nE(X) = \\\\sum_{x \\\\in R_X}x*f_X(x)\\n$$\\n\\nEs decir, sumamos cada valor que puede tomar la variable aleatoria por la probabilidad de que ocurra ese valor. En $C$\\n\\n$$\\n\\\\begin{align*}\\nE(C) &= 2*0.97 + 4*0.005 + 6*0.005 + 8*0.005 + 12*0.005 + 21*0.01 \\\\\\\\\\nE(C) &= 2.3\\n\\\\end{align*}\\n$$\\n\\nPor lo tanto nos convendr\xeda usar el servicio que ofrece un 2.5% fijo en todas las compras."},{"id":"/2022/06/30/recursion","metadata":{"permalink":"/2022/06/30/recursion","source":"@site/blog/2022-06-30-recursion/index.md","title":"Recusi\xf3n","description":"Hace unos d\xedas me cruc\xe9 con un kata en la plataforma de code training codewars tagged como recursion.","date":"2022-06-30T00:00:00.000Z","tags":[{"inline":true,"label":"algorithms","permalink":"/tags/algorithms"},{"inline":true,"label":"problem solving","permalink":"/tags/problem-solving"},{"inline":true,"label":"codewars","permalink":"/tags/codewars"}],"readingTime":3.995,"hasTruncateMarker":true,"authors":[{"name":"Yago Pajari\xf1o","title":"CS Student, Developer, and Tech Enthusiast","url":"https://github.com/yagopajarino","imageURL":"/img/ape.png","key":"yago"}],"frontMatter":{"title":"Recusi\xf3n","authors":"yago","tags":["algorithms","problem solving","codewars"],"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"\xbfQu\xe9 probabilidad hay de obtener el 21% de cashback en Belo?","permalink":"/2023/02/24/belo-cashback"},"nextItem":{"title":"Codeforces 799","permalink":"/2022/06/16/codeforces-799"}},"content":"Hace unos d\xedas me cruc\xe9 con un [kata](https://docs.codewars.com/concepts/kata/) en la plataforma de code training [codewars](https://www.codewars.com/about) tagged como _recursion._\\n\\n\xbfQu\xe9 es recursi\xf3n, c\xf3mo se usa, cuando se usa? Lo vemos\\n\\n\x3c!-- truncate --\x3e\\n\\n## Introducci\xf3n\\n\\nWikipedia lo define como:\\n\\n> Recursi\xf3n o recursividad es la forma en la cual se especifica un proceso basado en su propia definici\xf3n.\\n\\n(Casi) siempre las definiciones de una linea de wikipedia no ayudan mucho.\\n\\nPodemos decir que es uno de los primeros conceptos con los que estudiantes de alguna rama de programaci\xf3n se encuentran. Yo lo encontr\xe9 en la **primer** materia de la carrera de ciencias de la copmutaci\xf3n de la UBA.\\n\\nFormalmente podemos decir que es una t\xe9cnica o m\xe9todo para dise\xf1ar algoritmos, en el cual se divide el problema en partes que se repiten muchas veces.\\n\\nHay una caracter\xedstica muy llamativa que comparten todos los programas que usan recursi\xf3n, **se llaman a ellos mismos** \ud83e\udd2f. Veamos un ejemplo:\\n\\n## Ejemplo. Fibonacci\\n\\nLa [sucesion de fibonacci](https://economipedia.com/definiciones/sucesion-de-fibonacci.html) es una sucesi\xf3n infinita de n\xfameros naturales que comienza en 0, 1 y a partir de estos, cada elemento de la sucesi\xf3n es la suma de los dos anteriores. As\xed, los primeros 10 t\xe9rminos de esta sucesi\xf3n son:\\n\\n$$\\n0,1,1,2,3,5,8,13,21,34\\n$$\\n\\nY as\xed hasta el infinito.\\n\\nEntonces, \xbfC\xf3mo programar un algoritmo que tome un entero $n$ y devuelva el $n-esimo$ elemento de la sucesi\xf3n?\\n\\n### Implementaci\xf3n en python\\n\\n```python\\ndef fibonacci(n):\\n\\tif (n == 1):\\n\\t\\treturn 0\\n\\telif (n == 2):\\n\\t\\treturn 1\\n\\telse:\\n\\t\\treturn fibonacci(n-1) + fibonacci(n-2)\\n```\\n\\nVemos en el ejemplo que la funci\xf3n `fibonacci` se llama a s\xed misma, a mi la primera vez que vi esto me vol\xf3 la cabeza, \xbfC\xf3mo puede llamar una funci\xf3n a si misma en el medio de su definici\xf3n? \xbfNo deber\xeda entrar en un ciclo infinito?\\n\\nImaginemos que queremos saber cual es el tercer fibonacci usando esta funci\xf3n, veamos que har\xeda:\\n\\n1. Llamamos fibonacci(3)\\n2. Pregunta si 3 == 1 \u21d2 falso\\n3. Pregunta si 3 == 2 \u21d2 falso\\n4. Devuelve `fibonacci(2) + fibonacci(1)`\\n5. Llamamos fibonacci(2)\\n6. Pregunta si 2 == 1 \u21d2 falso\\n7. Pregunta si 2 == 2 \u21d2 verdadero \u21d2 devuelve 1\\n8. Llamamos fibonacci(1)\\n9. Pregunta si 1 == 1 \u21d2 verdadero \u21d2 devuelve 0\\n\\nEntonces en la llamada original, el programa reemplaza las llamadas a fibonacci por los n\xfameros encontrados, en este caso `fibonacci(2) + fibonacci(1) = 1 + 0 = 1`\\n\\nVolvamos a formalizar un poco la t\xe9cnica, la intuici\xf3n de caer en un ciclo infinito es una posibilidad cierta, veamos algunos conceptos fundamentales de este m\xe9todo:\\n\\n### Caso base\\n\\nEs aquel estado en el que se conoce una soluci\xf3n cierta y \xfanica, la sucesi\xf3n de llamados a la funci\xf3n tiene que terminar en este caso base, para evitar entrar en un ciclo infinito. En el caso de fibonacci, los casos base ocurren en $n = 0$ y $n = 1$.\\n\\n### Call stack\\n\\nEs el conjunto de llamados que se hace a la funci\xf3n, se lo suele pensar como una caja en la que se van apilando bloques a medida que se llama a la funci\xf3n.\\n\\n![stack](./stack.png)\\n\\nSe van apilando llamados hasta llegar al caso base y devolver un resultado, pasandolo a la caja de abajo.\\n\\n### Tail recursion\\n\\nEs el proceso desde el cual, comenzando por la ultima llamada del stack, se va pasando el resultado encontrado, hasta llegar a la llamada original de la funci\xf3n.\\n\\n## Codewars. Determinante de una matriz\\n\\nLink a la descripci\xf3n del problema [Matrix Determinant | Codewarw](https://www.codewars.com/kata/52a382ee44408cea2500074c)\\n\\nAhora s\xed veamos la resoluci\xf3n al siguiente problema (que di\xf3 origen a esta entrada)\\n\\nNos piden calcular el [determinante](https://www.mathsisfun.com/algebra/matrix-determinant.html) de una matriz de (NxN), podemos usar recursi\xf3n para resolverlo.\\n\\nEn el enunciado incluso nos dan una idea de como resolverlo:\\n\\n- A 1x1 matrix\xa0`|a|` has determinant\xa0`a`.\\n- A 2x2 matrix `[ [a, b], [c, d] ]` has determinant:\xa0`a*d - b*c`.\\n- The determinant of an\xa0`n x n` sized matrix is calculated by reducing the problem to the calculation of the determinants of\xa0`n` matrices of `n-1 x n-1`\xa0size.\\n\\nEn el caso de matrices de 3x3, por ejemplo:\\n\\n```\\n|a b c|\\n|d e f|\\n|g h i|\\n```\\n\\nel determinante se calcula como\\n\\n```python\\na * |e f| - b |d f| + c * |d e|\\n    |h i|     |g i|       |g h|\\n```\\n\\nQuedando el c\xe1lculo de tres matrices de 2x2 que ya sabemos como resolver. La idea entonces es llamar recursivamente a la funci\xf3n determinante hasta encontrar una matriz de 2x2, nuestro caso base.\\n\\n### Implementaci\xf3n en python\\n\\n```python\\ndef determinant(matrix):\\n    res = 0;\\n    if len(matrix[0]) == 1:\\n        res = matrix[0][0]\\n    elif len(matrix[0]) == 2:\\n        res = matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]\\n    else:\\n        for i in range(len(matrix[0])):\\n            res += (-1)**i * matrix[0][i] * determinant([l[0:i] + l[i+1:] for l in matrix[1:]])\\n    return res\\n```"},{"id":"/2022/06/16/codeforces-799","metadata":{"permalink":"/2022/06/16/codeforces-799","source":"@site/blog/2022-06-16-codeforces-799/index.md","title":"Codeforces 799","description":"Notas del Contest 799 de Codeforces.","date":"2022-06-16T00:00:00.000Z","tags":[{"inline":true,"label":"problem solving","permalink":"/tags/problem-solving"},{"inline":true,"label":"codeforces","permalink":"/tags/codeforces"}],"readingTime":3.21,"hasTruncateMarker":true,"authors":[{"name":"Yago Pajari\xf1o","title":"CS Student, Developer, and Tech Enthusiast","url":"https://github.com/yagopajarino","imageURL":"/img/ape.png","key":"yago"}],"frontMatter":{"title":"Codeforces 799","authors":"yago","tags":["problem solving","codeforces"],"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Recusi\xf3n","permalink":"/2022/06/30/recursion"},"nextItem":{"title":"La Suma de Gauss","permalink":"/2022/06/16/suma-gauss"}},"content":"Notas del [Contest 799 de Codeforces](https://codeforces.com/contest/1692).\\n\\n\x3c!-- truncate --\x3e\\n\\nDatos del contest\\n\\n| Fecha         | 14/06/2022 |\\n| ------------- | ---------- |\\n| Div           | 4          |\\n| # problems    | 8          |\\n| Solved        | 3          |\\n| Rating gained | +164       |\\n\\n## Problem A. Marathon\\n\\n[Enunciado del problema](https://codeforces.com/contest/1692/problem/A)\\n\\nPiden devolver la cantidad de participantes que est\xe1n por delante de Timur en una marat\xf3n de 4 participantes, nos dan las ditancias recorridas por cada uno de los participantes.\\n\\nEjemplo\\n\\n**Input**\\n\\n```txt\\n4\\n2 3 4 1\\n10000 0 1 2\\n500 600 400 300\\n0 9999 10000 9998\\n```\\n\\n**Output**\\n\\n```txt\\n2\\n0\\n1\\n3\\n```\\n\\n### Resoluci\xf3n\\n\\nEl primer elemento del input es la distancia recorrida por Timur, queremos saber cuantos rivales hay por delante, es decir cuantos recorrieron m\xe1s distancia que Timur.\\n\\n#### Implementaci\xf3n en python\\n\\n```python\\nimport sys\\nncases = int(input())\\n\\ndef solve():\\n    tiempos = [int(x) for x in input().split(\\" \\")]\\n    res.append(len([x for x in tiempos[1:] if x > tiempos[0]]))\\n\\nres = []\\nfor x in range(ncases):\\n    solve()\\n\\n[print(n) for n in res]\\n```\\n\\n## Problem B. All distinct\\n\\n[Enunciado del problema](https://codeforces.com/contest/1692/problem/B)\\n\\nNos dan un arreglo de `int` al que se le puede realizar la sgte operaci\xf3n:\\n\\n- Seleccionar dos indices, $i, j$ tales que $i <j$\\n- Remover los elementos $a_i, a_j$ del arreglo.\\n\\nNos piden determinar la longitud final del arreglo tal que esta sea m\xe1xima y que todos los elementos que lo forman sean distintos.\\n\\nEjemplo.\\n\\n**Input**\\n\\n```txt\\n4\\n6\\n2 2 2 3 3 3\\n5\\n9 1 9 9 1\\n4\\n15 16 16 15\\n4\\n10 100 1000 10000\\n```\\n\\n**Output**\\n2\\n1\\n2\\n4\\n\\n### Resoluci\xf3n\\n\\nFue por lejos el que m\xe1s me cost\xf3 del contest. Primero intent\xe9 armar una estructura con cada termino y la cantidad de apariciones que ten\xeda en la secuencia. Luego me quedaba con los elementos que tuvieran cantidad de apariciones impar.\\n\\nEsta estrategia fallaba en el tercer ejemplo, pues solo contemplaba eliminar elementos iguales.\\n\\nDespu\xe9s de verlo mucho (mucho) tiempo y hacer algunos ejemplos en papel, vi que el tama\xf1o m\xe1ximo al que se pod\xeda llegar era la cantidad de elementos distintos del arreglo. (como en el caso 4 del ejemplo).\\n\\nCon los elementos repetidos pueden pasar dos cosas, o bien los puedo eliminar a todos de a pares, o bien me queda alguno suelto, y como no puedo tener repetidos al final de las operaciones, necesito quitar uno de los _\xfanicos_.\\n\\n#### Implementaci\xf3n en python\\n\\n```python\\nimport sys\\nncases = int(input())\\n\\ndef solve():\\n    n = int(input())\\n    nUniq = len(set([int(x) for x in input().split(\\" \\")]))\\n    nDifs = n - nUniq\\n    res.append(nUniq - (nDifs % 2))\\n\\nres = []\\nfor x in range(ncases):\\n    solve()\\n\\n[print(n) for n in res]\\n```\\n\\n## Problem C. Where\u2019s the bishop?\\n\\n[Enunciado del problema](https://codeforces.com/contest/1692/problem/C)\\n\\nNos dan un tablero de ajedrez con las posiciones a las que puede atacar un alfil. Piden determinar la posici\xf3n en la que se encuentra el alfil. Aseguran que no se encuentra en los bordes.\\n\\nEjemplo\\n\\n**Input**\\n\\n```txt\\n3\\n\\n\\n.....#..\\n#...#...\\n.#.#....\\n..#.....\\n.#.#....\\n#...#...\\n.....#..\\n......#.\\n\\n\\n#.#.....\\n.#......\\n#.#.....\\n...#....\\n....#...\\n.....#..\\n......#.\\n.......#\\n\\n\\n.#.....#\\n..#...#.\\n...#.#..\\n....#...\\n...#.#..\\n..#...#.\\n.#.....#\\n#.......\\n```\\n\\n**Output**\\n\\n```txt\\n4 3\\n2 2\\n4 5\\n```\\n\\n### Resoluci\xf3n\\n\\nSabiendo que el alfil ataca en sus diagonales, alcanza con verificar cual es el casillero tal que las cuatro celdas en las diagonales y el casillero contienen \u201c#\u201d.\\n\\n#### Implementaci\xf3n en python\\n\\n```python\\nimport sys\\nncases = int(input())\\n\\ndef solve():\\n    empty = input()\\n    matrix = [[x for x in input()] for n in range(8)]\\n    for i in range(1,7):\\n        for j in range(1,7):\\n            if  (matrix[i-1][j-1] == \\"#\\")   and \\\\\\n                (matrix[i-1][j+1] == \\"#\\")   and \\\\\\n                (matrix[i][j] == \\"#\\")       and \\\\\\n                (matrix[i+1][j-1] == \\"#\\")   and \\\\\\n                (matrix[i+1][j+1] == \\"#\\"):\\n\\t                res.append(f\\"{i+1} {j+1}\\")\\n\\nres = []\\nfor x in range(ncases):\\n    solve()\\n\\n[print(n) for n in res]\\n```"},{"id":"/2022/06/16/suma-gauss","metadata":{"permalink":"/2022/06/16/suma-gauss","source":"@site/blog/2022-06-16-suma-gauss/index.mdx","title":"La Suma de Gauss","description":"Debe ser la anecdota m\xe1s contada por profesores de matem\xe1ticas del mundo. La del joven ni\xf1o prodigio que resuelve un problema mega complicado en muy poco tiempo.","date":"2022-06-16T00:00:00.000Z","tags":[{"inline":true,"label":"math","permalink":"/tags/math"},{"inline":true,"label":"algebra","permalink":"/tags/algebra"}],"readingTime":3.99,"hasTruncateMarker":true,"authors":[{"name":"Yago Pajari\xf1o","title":"CS Student, Developer, and Tech Enthusiast","url":"https://github.com/yagopajarino","imageURL":"/img/ape.png","key":"yago"}],"frontMatter":{"title":"La Suma de Gauss","authors":"yago","tags":["math","algebra"],"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Codeforces 799","permalink":"/2022/06/16/codeforces-799"},"nextItem":{"title":"Codeforces 797","permalink":"/2022/06/09/codeforces-797"}},"content":"Debe ser la anecdota m\xe1s contada por profesores de matem\xe1ticas del mundo. La del joven ni\xf1o prodigio que resuelve un problema mega complicado en muy poco tiempo.\\n\\n**Capaz no la escuchaste y soy el primero en contartela.**\\n\\n\x3c!-- truncate --\x3e\\n\\n## Introducci\xf3n\\n\\nA mediados de 1800, Alemania, un profesor de matem\xe1tica da a sus alumnos de primaria un desafiante problema:\\n\\n> Sumar todos los n\xfameros naturales del 1 al 100.\\n\\nAl poco tiempo, mucho antes de los esperado por el profesor, un joven [Carl Friederich Gauss](https://es.wikipedia.org/wiki/Carl_Friedrich_Gauss) entrega su respuesta al profesor, 5050.\\n\\nNo se sabe mucho de la veracidad de esta historia, ni muchos m\xe1s detalles, pero alcanza para sorprender a todos los que la escuchan por primera vez. (Y posta me sorprendi\xf3 cuando la esuche en una de mis primeras clases de [\xe1lgebra I](https://cms.dm.uba.ar/academico/materias/2docuat2021/Algebra%20I/)).\\n\\nLa pregunta natural que surge es como puede un chico sumar tantos n\xfameros tan r\xe1pido. Veamos como ser\xeda la cosa, o como lo hubiera encarado yo:\\n\\n- 1+2 = 3\\n- 3+3 = 6\\n- 6+4 = 10\\n- 10+5 = 15\\n- 15+6 = 21\\n- 21+7 = 28\\n\\nY casi que a partir de all\xed se empieza a complicar la cosa.\\n\\nSin embargo, el j\xf3ven Carl entendi\xf3 que:\\n\\n- 1+100 = 101\\n- 2+99 = 101\\n- 3+98 = 101\\n- \u2026\\n- 48+53 = 101\\n- 49+52 = 101\\n- 50+51 = 101\\n\\nY a partir de ac\xe1 se repite lo mismo con los terminos dados vuelta.\\n\\nEntonces hay 51 t\xe9rminos que suman 101, luego\\n\\n$$\\n 51 \\\\cdot 101 = 5050\\n$$\\n\\nQue es efectivamente la suma de todos los n\xfameros naturales entre 1 y 100.\\n\\n## Demostraci\xf3n\\n\\nLo siguiente que conviene preguntarse es si esta idea se puede extender al resto de los naturales y como se puede probar que se cumple para la suma entre 1 y 47, o entre 1 y 86.\\n\\nFormalmente, el problema de sumar los primeros $n$ n\xfameros naturales $S$ se puede expresar como:\\n\\n$$\\nS = \\\\sum_{i=1}^{n}i\\n$$\\n\\nMiremos lo siguiente, sea $n$ un n\xfamero natural,\\n\\n$$\\n\\\\begin{align*}\\nS &= 1 +\\\\; \\\\; \\\\; \\\\;\\\\;2\\\\;\\\\;\\\\;\\\\;\\\\:+...+ (n-1) + n \\\\\\\\\\nS &= n + (n-1) +...+ \\\\; \\\\; \\\\; \\\\;\\\\;2\\\\;\\\\;\\\\;\\\\;\\\\: + 1 \\\\\\\\\\n\\\\end{align*}\\n$$\\n\\nSumando nos queda,\\n\\n$$\\n2S = (n+1) + (n+1) + ... + (n+1) \\\\\\\\\\n2S = n(n+1) \\\\\\\\\\nS = \\\\frac{n(n+1)}{2}\\n$$\\n\\nEste es el t\xe9rmino general de la sumatoria de los $n$ primeros naturales.\\n\\n### Inducci\xf3n\\n\\nVamos a probar que vale que para todo $n$ natural, la suma de los primeros $n$ naturales es igual a $\\\\frac{n(n+1)}{2}$\\n\\nPara eso vamos a usar el [principio de inducci\xf3n](https://es.wikipedia.org/wiki/Inducci%C3%B3n_matem%C3%A1tica). Esencialmente lo que el principio propone es que si probamos (siempre usando los n\xfameros naturales) que un predicado vale:\\n\\n1. Para un primer caso (llamado caso base) y,\\n2. Si vale para un k-\xe9simo elemento cualquiera implica que vale para el siguiente.\\n\\nEntonces el predicado vale para cualquier natural.\\n\\nDefinimos entonces el predicado\\n\\n$$\\n\u204d\\n$$\\n\\nComo queremos probar que el predicado vale para cualquier natural, proponemos $n=1$ como caso base.\\n\\n### Caso base n = 1\\n\\nQueremos probar que vale el predicado, como es una igualdad vale con probar que ambos lados de la igualdad valen lo mismo.\\n\\nLuego donde dice $n$ reemplazamos con $1$\\n\\n$$\\np(1): \\\\sum_{i=1}^{1} i = \\\\frac{1(1+1)}{2} \\\\\\\\\\np(1): 1 = \\\\frac{2}{2} \\\\\\\\\\np(1): 1 = 1 \\\\\\\\\\n$$\\n\\nPor lo tanto $p(1)$ es verdadero.\\n\\n### Paso inductivo\\n\\nAhora queremos probar que dado un $k$ natural, vale que $p(k) \\\\implies p(k+1)$\\n\\nPara probar una [implicaci\xf3n logica](https://es.wikipedia.org/wiki/Implicaci%C3%B3n) alcanza con tomar como verdadero el antecedente, en este caso $p(k)$ y probar que vale el consecuente $p(k+1)$\\n\\nEntonces, si tomamos que $p(k)$ es verdadero, sabemos que vale\\n\\n$$\\np(k): \\\\sum_{i=1}^{k} i = \\\\frac{k(k+1)}{2}\\n$$\\n\\nY lo que queremos probar es que sabiendo esto, vale\\n\\n$$\\np(k+1): \\\\sum_{i=1}^{k+1} i = \\\\frac{(k+1)(k+1+1)}{2} \\\\\\\\\\np(k+1): \\\\sum_{i=1}^{k+1} i = \\\\frac{(k+1)(k+2)}{2} = \\\\frac{k^2 + 3k + 2}{2}\\n$$\\n\\nPero, por definici\xf3n de la sumatoria\\n\\n$$\\n\\\\sum_{i=1}^{k+1} i = (\\\\sum_{i=1}^{k} i) + k+1\\n$$\\n\\nPero ahora puedo reemplazar la sumatoria hasta $k$ por lo que se que vale.\\n\\n$$\\n\\\\begin{align*}\\n\\\\sum_{i=1}^{k+1} i &= (\\\\sum_{i=1}^{k} i) + k+1 \\\\\\\\\\n&=\\\\frac{k(k+1)}{2} + k+1 \\\\\\\\\\n&=\\\\frac{k^2+k}{2} + k+1 \\\\\\\\\\n&=\\\\frac{k^2+k+ 2k+2}{2}  \\\\\\\\\\n&=\\\\frac{k^2+3k+2}{2}  \\\\\\\\\\n\\\\end{align*}\\n$$\\n\\nComo se quer\xeda probar. Entonces as\xed queda probado el paso inductivo y habiendo probado antes el caso base queda probado que $p(n)$ vale para todo n\xfamero natural.\\n\\nEn conclusi\xf3n, para cualquier $n$ natural la suma de los primeros $n$ n\xfameros naturales es igual a $\\\\frac{n(n+1)}{2}$.\\n\\n## Recursos\\n\\n- [Toda la verdad sobre la an\xe9cdota de Gauss, el ni\xf1o prodigio, su profesor y la suma de 1 a 100 - La Ciencia de la Mula Francis](https://francis.naukas.com/2010/04/15/iii-carnaval-de-matematicas-toda-la-verdad-sobre-la-anecdota-de-gauss-el-nino-prodigio-su-profesor-y-la-suma-de-1-a-100/#:~:text=Carl%20Friedrich%20Gauss%20obtuvo%20la,Una%20historia%20mil%20veces%20contada.)\\n- [Suma de Gauss - Wikipedia, la enciclopedia libre](https://es.wikipedia.org/wiki/Suma_de_Gauss)\\n- [Carl Friedrich Gauss - Wikipedia, la enciclopedia libre](https://es.wikipedia.org/wiki/Carl_Friedrich_Gauss)"},{"id":"/2022/06/09/codeforces-797","metadata":{"permalink":"/2022/06/09/codeforces-797","source":"@site/blog/2022-06-09-codeforces-797/index.mdx","title":"Codeforces 797","description":"Notas del Contest 797 de Codeforces.","date":"2022-06-09T00:00:00.000Z","tags":[{"inline":true,"label":"problem solving","permalink":"/tags/problem-solving"},{"inline":true,"label":"codeforces","permalink":"/tags/codeforces"}],"readingTime":5.495,"hasTruncateMarker":true,"authors":[{"name":"Yago Pajari\xf1o","title":"CS Student, Developer, and Tech Enthusiast","url":"https://github.com/yagopajarino","imageURL":"/img/ape.png","key":"yago"}],"frontMatter":{"title":"Codeforces 797","authors":"yago","tags":["problem solving","codeforces"],"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"La Suma de Gauss","permalink":"/2022/06/16/suma-gauss"},"nextItem":{"title":"Searching Algorithms","permalink":"/2022/06/02/seraching-algorithms"}},"content":"Notas del [Contest 797 de Codeforces](https://codeforces.com/contest/1690).\\n\\n\x3c!-- truncate --\x3e\\n\\n## Datos del contest\\n\\n| Fecha         | 07/06/2022 |\\n| ------------- | ---------- |\\n| Div           | 3          |\\n| # problems    | 7          |\\n| Solved        | 3          |\\n| Rating gained | +242       |\\n\\n## Problem A. Print a pedestal\\n\\n[Enunciado del problema](https://codeforces.com/contest/1690/problem/A)\\n\\nNos dan una cantidad de bloques $n$ y con ellos devolver la distribuci\xf3n de bloques para armar un \u201cpodio\u201d tal que la altura de la columna del medio sea m\xednima.\\n\\nEjemplo\\n\\n**Input**\\n\\n```txt\\n6\\n11\\n6\\n10\\n100000\\n7\\n8\\n```\\n\\n**Output**\\n\\n```txt\\n4 5 2\\n2 3 1\\n4 5 1\\n33334 33335 33331\\n2 4 1\\n3 4 1\\n```\\n\\n### Resoluci\xf3n\\n\\nAlgunas consideraciones o tips:\\n\\n- Todas las columnas tienen que tener altura distinta.\\n- La columna del medio tiene que ser m\xe1s alta que las otras dos.\\n- La primer columna tiene que ser m\xe1s alta que la tercera.\\n- La suma de las alturas tiene que ser igual a $n$\\n\\n- No puede haber columnas con altura cero (o negativa)\\n\\nLo primero que consider\xe9 es que $n/3$ debe ser la altura m\xednima de la columna del medio.\\n\\nLuego veo que al dividir por 3, se generan tres clases, en funci\xf3n del resto de dividir a $n$ por 3 (lo llamamos $r$). Imaginemos que a cada columna le asignamos la parte entera de $n / 3$ = k y definimos $c = [k,k,k]$, luego:\\n\\n- Si $r = 0$ entonces no quedan elementos sueltos para agregar. Quitamos un bloque a la tercer columna y se lo agregamos a la del medio. As\xed $c = [k, k+1, k-1]$\\n- Si $r = 1$ entonces hay un elemento suelto para agregar. En este punto hay que separar el an\xe1lisis en dos casos: $n = 7$ y $n \\\\neq 7$\\n  - Si $n \\\\neq 7$, quitamos dos elementos a c3, agregamos dos elementos a c2 y uno a c1. As\xed, $c = [k+1, k+2, k-2]$\\n  - Si $n \\\\neq 7$ lo que pasa en el caso anterior es que $7/3 = 2*3+1$ luego si restamos dos como dec\xeda el item anterior, generar\xedamos una columna con altura igual a cero. Por lo tanto $c = [k, k+2, k-1]$\\n- Si $r = 2$ entonces, siguiendo el mismo razonamiento, $c = [k+1, k+2, k-1]$\\n\\n#### Implementaci\xf3n en python\\n\\n```python\\nimport sys\\nncases = int(input())\\n\\ndef solve():\\n    nblocks = int(input())\\n    floorDiv = nblocks // 3\\n    minHeight = floorDiv if nblocks % 3 == 0 else floorDiv + 1\\n    if (nblocks % 3 == 0):\\n        res = [floorDiv, floorDiv + 1, floorDiv - 1]\\n    elif (nblocks % 3 == 1):\\n        res = [floorDiv+1, floorDiv + 2, floorDiv - 2] if nblocks != 7 else [floorDiv, floorDiv + 2, floorDiv - 1]\\n    else:\\n        res = [floorDiv + 1, floorDiv + 2, floorDiv - 1]\\n    result.append(res)\\n\\nresult = []\\nfor x in range(ncases):\\n    solve()\\n\\n[print(f\\"{x[0]} {x[1]} {x[2]}\\") for x in result]\\n```\\n\\n## Problem B. Array Decrements\\n\\n[Enunciado](https://codeforces.com/contest/1690/problem/B)\\n\\nNos piden determinar si se puede obtener un arreglo a partir de otro, utilizando sucesivamente la siguiente operaci\xf3n:\\n\\n- Decrementar cada elemento no nulo de la secuencia en uno.\\n- Si el i-esimo elemento es nulo queda igual.\\n\\nEjemplo.\\n\\n**Input**\\n\\n```txt\\n6\\n4\\n3 5 4 1\\n1 3 2 0\\n3\\n1 2 1\\n0 1 0\\n4\\n5 3 7 2\\n1 1 1 1\\n5\\n1 2 3 4 5\\n1 2 3 4 6\\n1\\n8\\n0\\n1\\n4\\n6\\n```\\n\\n**Output**\\n\\n```txt\\nYES\\nYES\\nNO\\nNO\\nYES\\nNO\\n```\\n\\n### Resoluci\xf3n\\n\\nSean **a** y **b** secuencias. La soluci\xf3n m\xe1s intuitiva es hacer un loop por toda la secuencia **a**, ir restando uno a cada elemento de **a** y preguntar al final de cada iteraci\xf3n si es igual a **b**. No testee este caso, pero se nota que puede resultar un algoritmo costoso.\\n\\nOtra posible implementaci\xf3n consiste en,\\n\\n- Definimos maxDiff: max(a[i] - b[i] para alg\xfan $0 \\\\leq i < |a|$)\\n\\nPor lo tanto, despu\xe9s de estudiar un poco el problema se ve que,\\n\\n- diff tiene que ser mayor igual a cero.\\n- a[i] - b[i] tiene que ser igual a maxDiff para todos los i tales que b[i] \u2260 0\\n- a[i] - b[i] tiene que ser menor igual a maxDiff para todos los i tales que b[i] = 0\\n\\nDe manera tal que el restar uno a cada elemento sucesivamente se obtenga la secuencia **b.**\\n\\n#### Implementaci\xf3n en python\\n\\n```python\\nimport sys\\nncases = int(input())\\n\\ndef solve():\\n    lenList = int(input())\\n    a = [int(x) for x in str(input()).split(\\" \\")]\\n    b = [int(x) for x in str(input()).split(\\" \\")]\\n    n = [(a[n], b[n], a[n] - b[n]) for n in range(lenList)]\\n    maxDiff = max(x[2] for x in n)\\n    i = 0\\n    while (i < lenList and n[i][2] >= 0 and not (n[i][2] < maxDiff and n[i][1] != 0) and n[i][2] <=  maxDiff):\\n        i += 1\\n    result.append(\\"YES\\" if i == lenList else \\"NO\\")\\n\\nresult = []\\nfor x in range(ncases):\\n    solve()\\n\\n[print(x) for x in result]\\n```\\n\\n## Problem C. Restoring the Duration of Tasks\\n\\n[Enunciado](https://codeforces.com/contest/1690/problem/C)\\n\\nPiden que dadas una secuencia **a** de tiempo de recepci\xf3n de una tarea y **b** los tiempos de finalizaci\xf3n de una tarea, determinar la duraci\xf3n de ejecuci\xf3n de una tarea considerando,\\n\\n1. Comienza al llegar la primera tarea.\\n2. Si llega una tarea antes de finalizar la que est\xe1 en proceso, la manda al final de la fila.\\n3. Al finalizar una tarea, inmediatamente comienza con la que est\xe1 al comienzo de la fila.\\n\\nEjemplo\\n\\n```txt\\n4\\n3\\n0 3 7\\n2 10 11\\n2\\n10 15\\n11 16\\n9\\n12 16 90 195 1456 1569 3001 5237 19275\\n13 199 200 260 9100 10000 10914 91066 5735533\\n1\\n0\\n1000000000\\n```\\n\\n**Output**\\n\\n```txt\\n2 7 1\\n1 1\\n1 183 1 60 7644 900 914 80152 5644467\\n1000000000\\n```\\n\\nEs f\xe1cil ver que la primera tarea comienza en cero y termina en b[0].\\n\\nLuego cada una de las siguientes tareas va a finalizar en b[i] pero va a comenzar en el m\xe1ximo entre el tiempo de finalizaci\xf3n de la tarea anterior y el tiempo de recepci\xf3n de la tarea.\\n\\n#### Implementaci\xf3n en python\\n\\n```python\\nimport sys\\nncases = int(input())\\n\\ndef solve():\\n    ntasks = int(input())\\n    begTimes = [int(x) for x in str(input()).split(\\" \\")]\\n    endTimes = [int(x) for x in str(input()).split(\\" \\")]\\n    times = [(begTimes[i], endTimes[i]) for i in range(ntasks)]\\n    i = 1\\n    r = [str(times[0][1] - times[0][0])]\\n    while i < ntasks:\\n        r.append(str(times[i][1] - max([begTimes[i], endTimes[i-1]])))\\n        i += 1\\n    result.append(\\" \\".join(r))\\n\\nresult = []\\nfor x in range(ncases):\\n    solve()\\n\\n[print(x) for x in result]\\n```"},{"id":"/2022/06/02/seraching-algorithms","metadata":{"permalink":"/2022/06/02/seraching-algorithms","source":"@site/blog/2022-06-02-seraching-algorithms/index.md","title":"Searching Algorithms","description":"\xbfC\xf3mo buscar un elemento en una secuencia, arreglo, lista, etc de la mejor forma posible?","date":"2022-06-02T00:00:00.000Z","tags":[{"inline":true,"label":"algorithms","permalink":"/tags/algorithms"},{"inline":true,"label":"copmuter science","permalink":"/tags/copmuter-science"}],"readingTime":5.285,"hasTruncateMarker":true,"authors":[{"name":"Yago Pajari\xf1o","title":"CS Student, Developer, and Tech Enthusiast","url":"https://github.com/yagopajarino","imageURL":"/img/ape.png","key":"yago"}],"frontMatter":{"title":"Searching Algorithms","authors":"yago","tags":["algorithms","copmuter science"],"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Codeforces 797","permalink":"/2022/06/09/codeforces-797"},"nextItem":{"title":"TaTeTi","permalink":"/2022/05/29/tateti"}},"content":"\x3c!-- truncate --\x3e\\n\\n\xbfC\xf3mo buscar un elemento en una secuencia, arreglo, lista, etc de la mejor forma posible?\\n\\nImaginemos que tenemos la lista de n\xfameros enteros `lista = [1, 5, 9, 2, 6, 3, 5, 12, 8]` y queremos saber si el n\xfamero 7 se encuentra en ella. En otras palabras, buscamos al 7 en la lista.\\n\\nEl algoritmo m\xe1s _intuitivo_ para este caso es el de ir preguntando en cada posici\xf3n de la lista si se encuentra el 7. Lo implementamos.\\n\\n```cpp\\n#include <vector>\\nusing namespace std;\\n\\nbool busquedaLineal(vector<int> v, int n) {\\n\\tint i = 0;\\n\\twhile (i < v.size() && v[i] != n) {\\n\\t\\ti++;\\n\\t}\\n\\treturn i < v.size();\\n}\\n\\n// En el caso del ejemplo\\nn = 7;\\nvector<int> lista = {1,5,9,2,6,3,5,12,8};\\nbusquedaLineal(lista, n) // returns false\\n```\\n\\nEste algoritmo se llama b\xfasqueda lineal (_lineal search_)\\n\\nDespu\xe9s de verlo un rato, podemos ver que en el peor de los casos, este es aquel en el que el n\xfamero no est\xe1 en la lista (como el del ejemplo) el algoritmo pregunta en cada posici\xf3n del arreglo. Para listas peque\xf1as puede no importarnos que la recorra toda, pero imaginemos buscar un elemento en una secuencia de miles o millones de ellos.\\n\\nLa pregunta que surge entonces es saber si existe un proceso mejor que solucione el mismo problema, es decir, si existe un algoritmo m\xe1s **eficiente.**\\n\\n> \ud83d\udca1 M\xe1s adelante vemos que significa que un algoritmo sea mejor o m\xe1s eficiente que otro.\\n\\nCambiemos el problema ligeramente y veamos c\xf3mo surge casi instant\xe1neamente (y de manera muy intuitiva) un algoritmo mejor para resolverlo.\\n\\nImaginemos ahora que la lista que tenemos esta ordenada, s\xed, nada m\xe1s (y nada menos) que eso. Existe ahora un algoritmo m\xe1s eficiente que permita buscar un elemento en esta nueva lista ordenada.\\n\\nAc\xe1 es donde va un **SPOILER ALERT** para que aquel que quiera tomarse un rato para pensar el algoritmo.\\n\\n## Old school dictionary\\n\\nUtilicemos el siguiente ejemplo (casi fuera de \xe9poca) que se asemeja al problema que estamos intentando resolver.\\n\\n\xbfCu\xe1l es la mejor forma de encontrar una palabra de un diccionario de papel?\\n\\nSi en el caso de la lista de n\xfameros no hab\xeda surgido una idea de c\xf3mo resolver el problema, en este caso, con palabras en lugar de n\xfameros y un diccionario en lugar de lista, casi seguro que uno se imagina por d\xf3nde va la cosa.\\n\\nLa 23a edici\xf3n del [Diccionario de la RAE](https://es.wikipedia.org/wiki/Diccionario_de_la_lengua_espa%C3%B1ola#cite_note-10) tiene 2376 p\xe1ginas y 93111 t\xe9rminos definidos. Es f\xe1cil ver que ir palabra por palabra revisando si es la que estoy buscando no es la mejor estrategia. Naturalmente la estrategia que uno utiliza es:\\n\\n1. Ir a la palabra del medio (o cerca del medio)\\n2. Ver si mi palabra est\xe1 antes que esta.\\n   1. Si la respuesta es s\xed, me quedo con la primera mitad\\n   2. Si la respuesta es no, me quedo con la segunda mitad\\n3. Vuelvo al paso uno\\n\\nQueda claro que cada vez que uno vuelva al paso uno de este algoritmo, habr\xe1 descartado la mitad de elementos que ten\xeda antes. Sin embargo, usando el algoritmo anterior se iban descartando elementos de a uno.\\n\\nY este algoritmo que va dividiendo en dos la lista en la que estoy buscando se llama b\xfasqueda binaria (_binary search_).\\n\\nVolviendo al ejemplo de la lista de n\xfameros, ahora ordenada, veamos una posible implementaci\xf3n de este algoritmo.\\n\\n```cpp\\nbool busquedaBinaria(vector<int> s, int x) {\\n\\tint i = 0;\\n\\tint j = s.size() - 1;\\n\\twhile (j > i + 1) {\\n\\t\\tint k = (i+j) / 2;\\n\\t\\tif (s[k] > x) {\\n\\t\\t\\tj = k;\\n\\t\\t} else {\\n\\t\\t\\ti = k;\\n\\t\\t}\\n\\t}\\n\\treturn s[i] == x;\\n}\\n```\\n\\nEste algoritmo casi cumple con lo pedido, pero esta fallando en algunos casos puntuales. Por ej.:\\n\\n1. \xbfQu\xe9 pasa si la lista tiene 0 elementos?\\n2. \xbfSi tiene un elemento?\\n3. \xbfSi el elemento que buscamos es menor al primero de la lista?\\n4. \xbfSi el elemento que buscamos es mayor al \xfaltimo de la lista?\\n\\nComo el problema no nos limita la lista que podemos recibir como par\xe1metro, tenemos que tener en cuenta estos casos borde. Volviendo a la implementaci\xf3n.\\n\\n```cpp\\nbool busquedaBinaria(vector<int> s, int x) {\\n\\tif (s.size() == 0){\\n\\t\\treturn false;\\n\\t} else if ( s.size() == 1 ){\\n\\t\\treturn s[0] == x;\\n\\t} else if ( x < s[0] ) {\\n\\t\\treturn false;\\n\\t} else if ( x >= s[s.size()-1] ) {\\n\\t\\treturn s[s.size()-1] == x;\\n\\t} else {\\n\\t\\tint i = 0;\\n\\t\\tint j = s.size() - 1;\\n\\t\\twhile (j > i + 1) {\\n\\t\\t\\tint k = (i+j) / 2;\\n\\t\\t\\tif (s[k] > x) {\\n\\t\\t\\t\\tj = k;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ti = k;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn s[i] == x;\\n\\t}\\n}\\n```\\n\\nY as\xed, con una lista ahora **ordenada** podemos resolver el problema de buscar un elemento en la lista de manera m\xe1s eficiente.\\n\\n## Big O notation\\n\\nTenemos que responder ahora c\xf3mo sabemos que un algoritmo es mejor que otro. Decimos que un algoritmo es m\xe1s eficiente cuando realiza menos operaciones que otro.\\n\\nAs\xed, en ciencias de la computaci\xf3n surge la notaci\xf3n Big O para clasificar algoritmos de acuerdo al crecimiento en tiempos de ejecuci\xf3n y consumo de recursos a medida que aumenta el tama\xf1o de la entrada.\\n\\n> Big O clasifica el rendimiento en el peor caso de ejecuci\xf3n posible. Es decir el caso que m\xe1s operaciones le tome al algoritmo obtener una respuesta.\\n\\nLa definici\xf3n formal puede encontrarse en [Wikipedia](https://en.wikipedia.org/wiki/Big_O_notation#Formal_definition) aunque no es necesario para entender lo que sigue.\\n\\nIntuitivamente nos dimos cuenta de que el segundo algoritmo era m\xe1s eficiente, pues en lugar de buscar en cada elemento de la lista, iba dividiendo la lista en 2 sucesivamente, descartando en cada paso la mitad de los elementos que ten\xeda.\\n\\nEntonces, si llamamos $n$ al tama\xf1o de la lista, a medida que n crece,\\n\\n- b\xfasqueda lineal hace $n$ pasos para devolver un resultado\\n- b\xfasqueda binaria hace $log_2(n)$ pasos para devolver un resultado\\n\\nSi las vemos en un gr\xe1fico\\n\\n!https://files.realpython.com/media/linear_binary_plot.0fc7428a70f0.png\\n\\nVemos que para valores grandes de number of elements de la lista, el algoritmo de b\xfasqueda binaria usa menos pasos para obtener un resultado.\\n\\nY por lo tanto podemos concluir que para tama\xf1os de lista _suficientemente_ grandes el algoritmo de b\xfasqueda lineal el m\xe1s eficiente que el de b\xfasqueda lineal."},{"id":"/2022/05/29/tateti","metadata":{"permalink":"/2022/05/29/tateti","source":"@site/blog/2022-05-29-tateti/index.mdx","title":"TaTeTi","description":"C\xf3mo verificar que una partida de TaTeTi ha finalizado y tiene un ganador, utilizando la teor\xeda de n\xfameros primos.","date":"2022-05-29T00:00:00.000Z","tags":[{"inline":true,"label":"math","permalink":"/tags/math"},{"inline":true,"label":"algorithms","permalink":"/tags/algorithms"},{"inline":true,"label":"computer science","permalink":"/tags/computer-science"}],"readingTime":5.585,"hasTruncateMarker":true,"authors":[{"name":"Yago Pajari\xf1o","title":"CS Student, Developer, and Tech Enthusiast","url":"https://github.com/yagopajarino","imageURL":"/img/ape.png","key":"yago"}],"frontMatter":{"title":"TaTeTi","authors":"yago","tags":["math","algorithms","computer science"],"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Searching Algorithms","permalink":"/2022/06/02/seraching-algorithms"},"nextItem":{"title":"Criterios de Divisibilidad","permalink":"/2022/05/12/criterios-divisibilidad"}},"content":"C\xf3mo verificar que una partida de TaTeTi ha finalizado y tiene un ganador, utilizando la teor\xeda de n\xfameros primos.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Introducci\xf3n al problema\\n\\nUna partida de TaTeTi, TicTacToe, tres en raya, etc. se finaliza cuando:\\n\\n1. Un jugador consigue ubicar tres elementos en linea vertical, horizontal o en diagonal.\\n2. Se cubren todos los casilleros de una grilla de 3x3.\\n\\nSupongamos que luego del movimiento de un jugador, obtenemos una imagen, un estado de la grilla en juego. \xbfC\xf3mo se puede saber si la partida ha finalizado?\\n\\nEn lo que sigue vamos a considerar las siguientes reglas:\\n\\n- Elementos de la grilla.\\n  - 0 : Seleccionadas por el jugador uno.\\n  - 1 : Seleccionadas por el jugador dos.\\n  - -1 : No seleccionadas.\\n- Resultados posibles.\\n  - 0 : Partida finalizada, gana el jugador uno.\\n  - 1 : Partida finalizada, gana el jugador dos.\\n  - 2 : Partida finalizada, empate.\\n  - 3 : Partida no finalizada.\\n- Suponemos que no conocemos el \xfaltimo movimiento realizado.\\n\\n## Desarrollo\\n\\n### Teor\xeda de primos\\n\\nVamos a utilizar el [teorema fundamental de la aritm\xe9tica](https://es.wikipedia.org/wiki/Teorema_fundamental_de_la_aritm%C3%A9tica) para determinar si hay un ganador de la partida.\\n\\nEste teorema nos asegura que,\\n\\n> Todo\xa0entero\xa0positivo\xa0mayor que 1 es un\xa0n\xfamero primo\xa0o bien un \xfanico\xa0producto\xa0de n\xfameros primos.\\n\\nPor ejemplo,\\n\\n$$\\n6936 = 2^3 \\\\cdot 3 \\\\cdot 17^2 \\\\\\\\\\n1200 = 2^4 \\\\cdot 3 \\\\cdot 5^2\\n$$\\n\\n> La clave es que no existe otra factorizaci\xf3n en primos para estos n\xfameros.\\n\\n### Algoritmo\\n\\nPensemos ahora que tenemos la siguiente grilla,\\n\\n```cpp\\nvector<vector <int>> m ={\\n  {1,0,1},\\n  {0,0,1},\\n  {0,1,0}\\n};\\n```\\n\\nEs f\xe1cil ver que esta partida ha finalizado con empate, veamos el caso de una partida finalizada\\n\\n```cpp\\nvector<vector <int>> m ={\\n    {1,0,1},\\n    {-1,0,-1},\\n    {0,0,1}\\n};\\n```\\n\\nEn este caso se ve que el jugador uno (que coloca ceros) es el ganador de la partida.\\n\\nAsignemos ahora un n\xfamero primo a cada celda de la grilla, esto es\\n\\n![tateti](./tateti.png)\\n\\nAs\xed, a cada jugador vamos a poder asignarle un puntaje en base a la celda que halla elegido, multiplicando el puntaje actual por el primo que otorga la celda.\\n\\nImplementemos esto en C++\\n\\n```cpp\\nint tateti(vector<vector<int> > m){\\n    int resultado = 2;\\n    int puntJugadorUno = 1;\\n    int puntJugadorDos = 1;\\n    vector<int> primos = {2,3,5,7,11,13,17,19,23};\\n    // Asigno puntajes para cada jugador\\n    for (int i = 0; i < m.size(); ++i) {\\n        for (int j = 0; j < m[0].size(); ++j) {\\n            if (m[i][j] == 0) {\\n                puntJugadorUno *= primos[3*i+j];\\n            } else if (m[i][j] == 1) {\\n                puntJugadorDos *= primos[3*i+j];\\n            } else {\\n                resultado = 3;\\n            }\\n        }\\n    }\\n```\\n\\nAhora, dado el estado de una grilla en juego, tenemos el puntaje que tiene cada jugador, queda ver si hay alg\xfan ganador, o si la partida todav\xeda est\xe1 en juego.\\n\\nAc\xe1 es donde entra el teorema fundamental de la aritm\xe9tica (TFA). Sabemos que cualquier n\xfamero positivo es producto \xfanico de primos. Por lo tanto a cada una de las 8 jugadas ganadoras podemos asignarle el producto de primos de las celdas que la forman.\\n\\n1. $H1 = 2 * 3 * 5$\\n2. $H2 = 7 * 11 * 13$\\n3. $H3 = 17 * 19 * 23$\\n4. $V1 = 2 * 7 * 17$\\n5. $V2 = 3 * 11 * 19$\\n6. $V3 = 5 * 13 * 23$\\n7. $D1 = 2 * 11 * 23$\\n8. $D2 = 5 * 11 * 17$\\n\\nEstos son los posibles escenarios ganadores. Por el TFA sabemos entonces que hay un ganador de la partida si alguno de estos productos divide al puntaje del jugador.\\n\\nLo implementamos,\\n\\n```cpp\\n// Verifico si hay ganador\\nvector<int> ganadores = {2*3*5, 7*11*13, 17*19*23, 2*7*17,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t 3*11*19, 5*13*23, 2*11*23, 5*11*17};\\nint i = 0;\\nwhile (i < ganadores.size() && (resultado == 2 || resultado == 3) ){\\n    if (puntJugadorUno % ganadores[i] == 0) {\\n        resultado = 0;\\n    } else if (puntJugadorDos % ganadores[i] == 0) {\\n        resultado = 1;\\n    }\\n    i++;\\n}\\n```\\n\\n### Resultado\\n\\nJuntando ambos bloques de c\xf3digo que tenemos obtenemos,\\n\\n```cpp\\nint tateti(vector<vector<int> > m){\\n    int resultado = 2;\\n    int puntJugadorUno = 1;\\n    int puntJugadorDos = 1;\\n    vector<int> primos = {2,3,5,7,11,13,17,19,23};\\n    vector<int> ganadores = {2*3*5, 7*11*13, 17*19*23, 2*7*17,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t 3*11*19, 5*13*23, 2*11*23, 5*11*17};\\n    // Asigno puntajes para cada jugador\\n    for (int i = 0; i < m.size(); ++i) {\\n        for (int j = 0; j < m[0].size(); ++j) {\\n            if (m[i][j] == 0) {\\n                puntJugadorUno *= primos[3*i+j];\\n            } else if (m[i][j] == 1) {\\n                puntJugadorDos *= primos[3*i+j];\\n            } else {\\n                resultado = 3;\\n            }\\n        }\\n    }\\n    // Verifico si hay ganador\\n    int i = 0;\\n    while (i < ganadores.size() && (resultado == 2 || resultado == 3) ){\\n        if (puntJugadorUno % ganadores[i] == 0) {\\n            resultado = 0;\\n        } else if (puntJugadorDos % ganadores[i] == 0) {\\n            resultado = 1;\\n        }\\n        i++;\\n    }\\n    return resultado;\\n}\\n```\\n\\n## Test\\n\\nObtuvimos un programa que creemos verifica si existe un ganador en una partida de TaTeTi, \xbfC\xf3mo podemos verificar que es correcto?\\n\\nLa t\xe9cnica m\xe1s utilizada en la actualidad es el testing que compara el resultado esperado por el programa con el que efectivamente devuelve este.\\n\\nVeamos algunos casos de test para ver si el programa hace lo que quer\xedamos.\\n\\nPara lo que sigue usamos la librer\xeda de [Google Test](https://github.com/google/googletest)\\n\\n### Casos de test o test cases\\n\\nNo buscamos probar en todos los posibles estados de una partida, ya que deber\xedamos probar [5487 posibles escenarios](https://en.wikipedia.org/wiki/Game_complexity#:~:text=For%20tic%2Dtac%2Dtoe%2C,have%20a%20row%20of%20three.).\\n\\nPor lo tanto buscamos un conjunto de casos de test que sean representativos del total de escenarios posibles.\\n\\n- No hubo movimientos\\n  ```cpp\\n  TEST(tateti, noHuboMovimientos){\\n      vector<vector <int>> m={\\n              {-1,-1,-1},\\n              {-1,-1,-1},\\n              {-1,-1,-1}\\n      };\\n      EXPECT_EQ(tateti(m), 3);\\n  }\\n  ```\\n- Empate\\n  ```cpp\\n  TEST(tateti, empate){\\n      vector<vector <int>> m={\\n              {1,0,1},\\n              {0,0,1},\\n              {0,1,0}\\n      };\\n      EXPECT_EQ(tateti(m), 2);\\n  }\\n  ```\\n- Partida no finalizada\\n  ```cpp\\n  TEST(tateti, noFinalizada){\\n      vector<vector <int>> m={\\n              {1,-1,-1},\\n              {1,0,-1},\\n              {0,-1,0}\\n      };\\n      EXPECT_EQ(tateti(m), 3);\\n  }\\n  ```\\n- Gana el jugador uno vertical\\n  ```cpp\\n  TEST(tateti, ganaUnoVertical){\\n      vector<vector <int>> m={\\n              {1,0,1},\\n              {-1,0,-1},\\n              {0,0,1}\\n      };\\n      EXPECT_EQ(tateti(m), 0);\\n  }\\n  ```\\n- Gana el jugador dos vertical\\n  ```cpp\\n  TEST(tateti, ganaDosVertical){\\n      vector<vector <int>> m={\\n              {1,-1,0},\\n              {1,0,-1},\\n              {1,-1,0}\\n      };\\n      EXPECT_EQ(tateti(m), 1);\\n  }\\n  ```\\n- Gana el jugador uno horizontal\\n  ```cpp\\n  TEST(tateti, ganaUnoHorizontal){\\n      vector<vector <int>> m={\\n              {1,-1,-1},\\n              {0,0,0},\\n              {0,1,1}\\n      };\\n      EXPECT_EQ(tateti(m), 0);\\n  }\\n  ```\\n- Gana el jugador dos horizontal\\n  ```cpp\\n  TEST(tateti, ganaDosHorizontal){\\n      vector<vector <int>> m={\\n              {0,-1,0},\\n              {-1,0,-1},\\n              {1,1,1}\\n      };\\n      EXPECT_EQ(tateti(m), 1);\\n  }\\n  ```\\n- Gana el jugador uno diagonal\\n  ```cpp\\n  TEST(tateti, ganaUnoDiagonal){\\n      vector<vector <int>> m={\\n              {0,-1,-1},\\n              {1,0,-1},\\n              {1,-1,0}\\n      };\\n      EXPECT_EQ(tateti(m), 0);\\n  }\\n  ```\\n- Gana el jugador uno al final\\n  ```cpp\\n  TEST(tateti, ganaUnoAlFinal){\\n      vector<vector <int>> m={\\n              {1,0,1},\\n              {0,0,1},\\n              {1,0,0}\\n      };\\n      EXPECT_EQ(tateti(m), 0);\\n  }\\n  ```\\n\\nUsando un compilador y tester podemos verificar que el programa aprueba todos los test cases.\\n\\nPor lo tanto determinamos que el programa es correcto respecto al problema especificado."},{"id":"/2022/05/12/criterios-divisibilidad","metadata":{"permalink":"/2022/05/12/criterios-divisibilidad","source":"@site/blog/2022-05-12-criterios-divisibilidad/index.md","title":"Criterios de Divisibilidad","description":"C\xf3mo verificar que una partida de TaTeTi ha finalizado y tiene un ganador, utilizando la teor\xeda de n\xfameros primos.","date":"2022-05-12T00:00:00.000Z","tags":[{"inline":true,"label":"math","permalink":"/tags/math"},{"inline":true,"label":"algorithms","permalink":"/tags/algorithms"},{"inline":true,"label":"computer science","permalink":"/tags/computer-science"}],"readingTime":7.455,"hasTruncateMarker":true,"authors":[{"name":"Yago Pajari\xf1o","title":"CS Student, Developer, and Tech Enthusiast","url":"https://github.com/yagopajarino","imageURL":"/img/ape.png","key":"yago"}],"frontMatter":{"title":"Criterios de Divisibilidad","authors":"yago","tags":["math","algorithms","computer science"],"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"TaTeTi","permalink":"/2022/05/29/tateti"}},"content":"C\xf3mo verificar que una partida de TaTeTi ha finalizado y tiene un ganador, utilizando la teor\xeda de n\xfameros primos.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Introducci\xf3n\\n\\n\xbfPor qu\xe9 vale que un n\xfamero es **par** si su \xfaltima cifra es 0, 2, 4, 6 u 8?\\n\\n\xbfC\xf3mo sabemos que un n\xfamero es divisible por 5 si termina en 0 o 5?\\n\\n\xbfY que un n\xfamero es divisible por 3 si la suma de sus d\xedgitos lo es?\\n\\nO c\xf3mo se justifican [todos estos](https://es.wikipedia.org/wiki/Divisibilidad#Criterios_de_divisibilidad).\\n\\n### Divisibilidad\\n\\nEl algoritmo de divisi\xf3n de n\xfameros enteros nos dice que:\\n\\n$$\\n\\\\forall (a, b) \\\\in \\\\mathbb{Z}^2: \\\\exists (k, r) \\\\in \\\\mathbb{Z}^2 \\\\wedge (0 \\\\leq r < b) / a = k.b + r\\n$$\\n\\n> Lista de s\xedmbolos matem\xe1ticos y su significado. [link](https://es.wikipedia.org/wiki/Anexo:S%C3%ADmbolos_matem%C3%A1ticos)\\n\\nEn palabras,\\n\\n> *Para todo **a** y **b** enteros, existen **k,** **r** enteros con r entre 0 y **b;** tales que **a** es igual a k*b + r\\\\*\\n\\nY coloquialmente llamamos:\\n\\n- a = dividendo\\n- b = divisor\\n- k = cociente\\n- r = resto\\n\\nY entonces, decimos que:\\n\\n$$\\na|b \\\\iff \\\\exists k \\\\in \\\\mathbb{Z}/a = k.b\\n$$\\n\\n> \ud83d\udca1 El s\xedmbolo \u201c|\u201d significa \u201cdivide\u201d\\n\\nO lo que es lo mismo, que el resto de dividir **a** por **b** es igual a 0.\\n\\n#### Congruencia\\n\\nLa notaci\xf3n de congruencia, derivada del algoritmo de divisi\xf3n, nos permite relacionar el divisor, dividendo y resto de la siguiente manera.\\n\\n$$\\na = k.b + r \\\\iff a \\\\equiv r (b)\\n$$\\n\\nEn palabras decimos que \u201c_a es congruente a r m\xf3dulo b\u201d_\\n\\nY una de las propiedades de la congruencia, que llamamos \u201ctomar resto\u201d es\\n\\n$$\\na \\\\equiv \\\\text{resto}(a,c) (c)\\n$$\\n\\nPor ejemplo,\\n\\n$$\\n26 \\\\equiv resto(26, 4)(4) \\\\equiv 2(4)\\n$$\\n\\nPues el restos de dividir a 26 por 4 es igual a 2. Esta propiedad va a ser usada en la demostraci\xf3n de los criterios.\\n\\n### Sistemas de numeraci\xf3n\\n\\nA lo largo de la historia han existido (y existen) muchos sistemas de numeraci\xf3n distintos, con ventajas y desventajas entre s\xed.\\n\\nhttps://www.youtube.com/watch?v=ggOPJ8gafPo\\n\\nUn sistema de numeraci\xf3n no es m\xe1s que un conjunto de s\xedmbolos y reglas que permiten construir todos los n\xfameros v\xe1lidos (para ese sistema). Quiz\xe1s uno de los m\xe1s reconocidos, distinto al que usamos todos los d\xedas, sea el sistema de numeraci\xf3n romano, que utiliza letras y la posici\xf3n en las que se escriben para identificar los n\xfameros.\\n\\nEl sistema que usamos hoy en d\xeda es el sistema de numeraci\xf3n decimal, o en base 10.\\n\\nLas reglas de este sistema son simples pero muy poderosas:\\n\\n1. Se utilizan 10 s\xedmbolos: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\\n\\n2. Todo n\xfamero _a_ se puede escribir como\\n\\n$$\\na = c_1 \\\\cdot 10^{n} + c_2 \\\\cdot 10^{n-1} + ... + c_{n-1} \\\\cdot 10^{1} + c_{n} \\\\cdot 10^{0}\\n$$\\n\\nDonde $n$ es la cantidad de d\xedgitos menos uno del n\xfamero y $c_i$ es el s\xedmbolo en la posici\xf3n $i$.\\n\\n> \ud83d\udd11 Esta es la notaci\xf3n formal para el sistema que usamos de forma natural todos los d\xedas\\n\\nPor ejemplo sabemos que el n\xfamero,\\n\\n$$\\n\\\\begin{align*}\\n1234 &= 1 \\\\cdot 10^3 + 2 \\\\cdot 10^2 + 3 \\\\cdot 10^1 + 4 \\\\cdot 10^0 \\\\\\\\\\n1234 &= 1000 + 200 + 30 + 4 \\\\\\\\\\n\\\\end{align*}\\n$$\\n\\nAunque no estemos haciendo esta suma cada vez que escribimos un n\xfamero.\\n\\nExisten otros sistemas de numeraci\xf3n muy usados como el [binario](https://es.wikipedia.org/wiki/Sistema_binario) o el [hexadecimal](https://es.wikipedia.org/wiki/Sistema_hexadecimal)\\n\\n## \xbfPor qu\xe9 valen los criterios de divisibilidad?\\n\\nVamos a ir descubriendo por qu\xe9 valen los criterios de divisibilidad del dos, tres y cinco.\\n\\n### Divisibilidad por 2\\n\\n> Un n\xfamero es divisible por 2 si: el n\xfamero termina en una cifra par (0, 2, 4, 6, 8).\\n\\nVamos a probar la validez de este criterio (y todos los dem\xe1s) usando todo lo que estuvimos viendo previamente.\\n\\nSabemos que un n\xfamero $n$ es divisible por $2$ si $\\\\exists k \\\\in \\\\mathbb{Z} / n = 2k$ y por congruencias sabemos que\\n\\n$$\\nn = 2k \\\\iff n \\\\equiv 0(2)\\n$$\\n\\nPor lo tanto vamos a querer probar que cualquier n\xfameros es divisible por dos si es congruente a cero m\xf3dulo 2.\\n\\nAhora usamos lo que vimos del sistema de numeraci\xf3n decimal, sabemos que $n$ se puede escribir como\\n\\n$$\\nn = c_1 \\\\cdot 10^{r} + c_2 \\\\cdot 10^{r-1} + ... + c_{r-1} \\\\cdot 10^{1} + c_{r} \\\\cdot 10^{0}\\n$$\\n\\nEntonces juntando ambas cosas\\n\\n$$\\nn \\\\equiv 0(2) \\\\iff c_1 \\\\cdot 10^{r} + c_2 \\\\cdot 10^{r-1} + ... + c_{r-1} \\\\cdot 10^{1} + c_{r} \\\\cdot 10^{0} \\\\equiv 0 (2)\\n$$\\n\\nSi ahora tomamos resto a cada sumando\\n\\n$$\\nn \\\\equiv 0(2) \\\\iff c_1 \\\\cdot 0^{r} + c_2 \\\\cdot 0^{r-1} + ... + c_{r-1} \\\\cdot 0^{1} + c_{r} \\\\cdot 1 \\\\equiv 0 (2)\\n$$\\n\\nPues sabemos que el resto de dividir a 10 por 2 es igual a 0, y que cualquier n\xfamero elevado a la 0 es 1.\\n\\nPor lo tanto nos queda algo del estilo\\n\\n$$\\nn \\\\equiv 0(2) \\\\iff c_{r} \\\\cdot 1 \\\\equiv 0 (2) \\\\iff c_{r} \\\\equiv 0(2)\\n$$\\n\\nY esto quiere decir, como quer\xedamos probar, que un n\xfamero es divisible por 2 (o congruente a cero m\xf3dulo 2) si termina en un n\xfamero par.\\n\\n### Divisibilidad por 3\\n\\n> Un n\xfamero es divisible por 3 si: la suma de sus cifras es un m\xfaltiplo de 3.\\n\\nVamos a usar el mismo razonamiento que en el caso anterior\\n\\nSabemos que un n\xfamero $n$ es divisible por $3$ si $\\\\exists k \\\\in \\\\mathbb{Z} / n = 3k$ y por congruencias sabemos que\\n\\n$$\\nn = 3k \\\\iff n \\\\equiv 0(3)\\n$$\\n\\nPor lo tanto vamos a querer probar que cualquier n\xfameros es divisible por dos si es congruente a 0 m\xf3dulo 3.\\n\\nAhora usamos lo que vimos del sistema de numeraci\xf3n decimal, sabemos que $n$ se puede escribir como\\n\\n$$\\nn = c_1 \\\\cdot 10^{r} + c_2 \\\\cdot 10^{r-1} + ... + c_{r-1} \\\\cdot 10^{1} + c_{r} \\\\cdot 10^{0}\\n$$\\n\\nEntonces juntando ambas cosas\\n\\n$$\\nn \\\\equiv 0(3) \\\\iff c_1 \\\\cdot 10^{r} + c_2 \\\\cdot 10^{r-1} + ... + c_{r-1} \\\\cdot 10^{1} + c_{r} \\\\cdot 10^{0} \\\\equiv 0 (3)\\n$$\\n\\nSi ahora tomamos resto a cada sumando\\n\\n<aside>\\n\ud83d\udd11 Ac\xe1 est\xe1 la diferencia con el caso anterior (y con los que sigan).\\n\\n</aside>\\n\\n$$\\nn \\\\equiv 0(3) \\\\iff c_1 \\\\cdot 1^{r} + c_2 \\\\cdot 1^{r-1} + ... + c_{r-1} \\\\cdot 1^{1} + c_{r} \\\\cdot 1 \\\\equiv 0 (3)\\n$$\\n\\nEn este caso, el resto de dividir a 10 por 3 es igual a 1.\\n\\nPor lo tanto nos queda algo del estilo\\n\\n$$\\nn \\\\equiv 0(3) \\\\iff c_1 + c_2 + ... + c_{r-1} + c_{r} \\\\equiv 0 (3)\\n$$\\n\\nY esto quiere decir, como quer\xedamos probar, que un n\xfamero es divisible por 3 (o congruente a 0 m\xf3dulo 3) si la suma de sus cifras (sus $c_i$) es divisible por 3.\\n\\n### Divisibilidad por 5\\n\\n> Un n\xfamero es divisible por 5 si: la \xfaltima cifra es 0 o 5.\\n\\nDe nuevo usamos los visto en los casos anteriores.\\n\\nSabemos que un n\xfamero $n$ es divisible por $5$ si $\\\\exists k \\\\in \\\\mathbb{Z} / n = 5k$ y por congruencias sabemos que\\n\\n$$\\nn = 5k \\\\iff n \\\\equiv 0(5)\\n$$\\n\\nPor lo tanto vamos a querer probar que cualquier n\xfameros es divisible por dos si es congruente a 0 m\xf3dulo 5.\\n\\nAhora usamos lo que vimos del sistema de numeraci\xf3n decimal, sabemos que $n$ se puede escribir como\\n\\n$$\\nn = c_1 \\\\cdot 10^{r} + c_2 \\\\cdot 10^{r-1} + ... + c_{r-1} \\\\cdot 10^{1} + c_{r} \\\\cdot 10^{0}\\n$$\\n\\nEntonces juntando ambas cosas\\n\\n$$\\nn \\\\equiv 0(5) \\\\iff c_1 \\\\cdot 10^{r} + c_2 \\\\cdot 10^{r-1} + ... + c_{r-1} \\\\cdot 10^{1} + c_{r} \\\\cdot 10^{0} \\\\equiv 0 (5)\\n$$\\n\\nSi ahora tomamos resto a cada sumando\\n\\n$$\\nn \\\\equiv 0(5) \\\\iff c_1 \\\\cdot 0^{r} + c_2 \\\\cdot 0^{r-1} + ... + c_{r-1} \\\\cdot 0^{1} + c_{r} \\\\cdot 1 \\\\equiv 0 (5)\\n$$\\n\\nEn este caso, el resto de dividir a 10 por 5 es igual a 0.\\n\\nPor lo tanto nos queda algo muy similar al criterio del 2\\n\\n$$\\nn \\\\equiv 0(5) \\\\iff c_{r} \\\\equiv 0 (5)\\n$$\\n\\nY esto quiere decir, como quer\xedamos probar, que un n\xfamero es divisible por 5 (o congruente a 0 m\xf3dulo 5) si la \xfaltima cifra es divisible por 5, o lo que es lo mismo, que termina en 0 o 5.\\n\\nEl \xfaltimo criterio que no vamos a ver ac\xe1 pero tambi\xe9n es muy interesante es el del 11.\\n\\n## Conclusiones\\n\\nCrear atajos nos ayuda a resolver problemas de forma eficiente. Gracias a los criterios de divisibilidad, sabemos que el n\xfamero 19284758403294 es divisible por 2 ya que termina en 4, sin tener que andar haciendo las cuentas.\\n\\nMuchas veces nos quedamos con _la f\xf3rmula_ que nos permite resolver problemas sin saber por qu\xe9 vale lo que sabemos que es cierto. Los criterios de divisibilidad son ciertos y valen; ya vimos por qu\xe9 \ud83e\udd13"}]}}')}}]);