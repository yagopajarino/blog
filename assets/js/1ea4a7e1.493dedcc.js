"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2864],{6159:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>r,contentTitle:()=>t,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var s=a(4848),i=a(8453);const l={title:"Searching Algorithms",authors:"yago",tags:["algorithms","copmuter science"],hide_table_of_contents:!1},t=void 0,o={permalink:"/blog/2022/06/02/seraching-algorithms",source:"@site/blog/2022-06-02-seraching-algorithms/index.md",title:"Searching Algorithms",description:"\xbfC\xf3mo buscar un elemento en una secuencia, arreglo, lista, etc de la mejor forma posible?",date:"2022-06-02T00:00:00.000Z",tags:[{inline:!0,label:"algorithms",permalink:"/blog/tags/algorithms"},{inline:!0,label:"copmuter science",permalink:"/blog/tags/copmuter-science"}],readingTime:5.285,hasTruncateMarker:!0,authors:[{name:"Yago Pajari\xf1o",title:"CS Student, Developer, and Tech Enthusiast",url:"https://github.com/yagopajarino",imageURL:"/blog/img/ape.png",key:"yago"}],frontMatter:{title:"Searching Algorithms",authors:"yago",tags:["algorithms","copmuter science"],hide_table_of_contents:!1},unlisted:!1,prevItem:{title:"Codeforces 797",permalink:"/blog/2022/06/09/codeforces-797"},nextItem:{title:"TaTeTi",permalink:"/blog/2022/05/29/tateti"}},r={authorsImageUrls:[void 0]},c=[{value:"Old school dictionary",id:"old-school-dictionary",level:2},{value:"Big O notation",id:"big-o-notation",level:2}];function m(e){const n={a:"a",annotation:"annotation",blockquote:"blockquote",code:"code",em:"em",h2:"h2",li:"li",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",msub:"msub",ol:"ol",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"\xbfC\xf3mo buscar un elemento en una secuencia, arreglo, lista, etc de la mejor forma posible?"}),"\n",(0,s.jsxs)(n.p,{children:["Imaginemos que tenemos la lista de n\xfameros enteros ",(0,s.jsx)(n.code,{children:"lista = [1, 5, 9, 2, 6, 3, 5, 12, 8]"})," y queremos saber si el n\xfamero 7 se encuentra en ella. En otras palabras, buscamos al 7 en la lista."]}),"\n",(0,s.jsxs)(n.p,{children:["El algoritmo m\xe1s ",(0,s.jsx)(n.em,{children:"intuitivo"})," para este caso es el de ir preguntando en cada posici\xf3n de la lista si se encuentra el 7. Lo implementamos."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"#include <vector>\nusing namespace std;\n\nbool busquedaLineal(vector<int> v, int n) {\n\tint i = 0;\n\twhile (i < v.size() && v[i] != n) {\n\t\ti++;\n\t}\n\treturn i < v.size();\n}\n\n// En el caso del ejemplo\nn = 7;\nvector<int> lista = {1,5,9,2,6,3,5,12,8};\nbusquedaLineal(lista, n) // returns false\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Este algoritmo se llama b\xfasqueda lineal (",(0,s.jsx)(n.em,{children:"lineal search"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"Despu\xe9s de verlo un rato, podemos ver que en el peor de los casos, este es aquel en el que el n\xfamero no est\xe1 en la lista (como el del ejemplo) el algoritmo pregunta en cada posici\xf3n del arreglo. Para listas peque\xf1as puede no importarnos que la recorra toda, pero imaginemos buscar un elemento en una secuencia de miles o millones de ellos."}),"\n",(0,s.jsxs)(n.p,{children:["La pregunta que surge entonces es saber si existe un proceso mejor que solucione el mismo problema, es decir, si existe un algoritmo m\xe1s ",(0,s.jsx)(n.strong,{children:"eficiente."})]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"\ud83d\udca1 M\xe1s adelante vemos que significa que un algoritmo sea mejor o m\xe1s eficiente que otro."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Cambiemos el problema ligeramente y veamos c\xf3mo surge casi instant\xe1neamente (y de manera muy intuitiva) un algoritmo mejor para resolverlo."}),"\n",(0,s.jsx)(n.p,{children:"Imaginemos ahora que la lista que tenemos esta ordenada, s\xed, nada m\xe1s (y nada menos) que eso. Existe ahora un algoritmo m\xe1s eficiente que permita buscar un elemento en esta nueva lista ordenada."}),"\n",(0,s.jsxs)(n.p,{children:["Ac\xe1 es donde va un ",(0,s.jsx)(n.strong,{children:"SPOILER ALERT"})," para que aquel que quiera tomarse un rato para pensar el algoritmo."]}),"\n",(0,s.jsx)(n.h2,{id:"old-school-dictionary",children:"Old school dictionary"}),"\n",(0,s.jsx)(n.p,{children:"Utilicemos el siguiente ejemplo (casi fuera de \xe9poca) que se asemeja al problema que estamos intentando resolver."}),"\n",(0,s.jsx)(n.p,{children:"\xbfCu\xe1l es la mejor forma de encontrar una palabra de un diccionario de papel?"}),"\n",(0,s.jsx)(n.p,{children:"Si en el caso de la lista de n\xfameros no hab\xeda surgido una idea de c\xf3mo resolver el problema, en este caso, con palabras en lugar de n\xfameros y un diccionario en lugar de lista, casi seguro que uno se imagina por d\xf3nde va la cosa."}),"\n",(0,s.jsxs)(n.p,{children:["La 23a edici\xf3n del ",(0,s.jsx)(n.a,{href:"https://es.wikipedia.org/wiki/Diccionario_de_la_lengua_espa%C3%B1ola#cite_note-10",children:"Diccionario de la RAE"})," tiene 2376 p\xe1ginas y 93111 t\xe9rminos definidos. Es f\xe1cil ver que ir palabra por palabra revisando si es la que estoy buscando no es la mejor estrategia. Naturalmente la estrategia que uno utiliza es:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Ir a la palabra del medio (o cerca del medio)"}),"\n",(0,s.jsxs)(n.li,{children:["Ver si mi palabra est\xe1 antes que esta.","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Si la respuesta es s\xed, me quedo con la primera mitad"}),"\n",(0,s.jsx)(n.li,{children:"Si la respuesta es no, me quedo con la segunda mitad"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Vuelvo al paso uno"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Queda claro que cada vez que uno vuelva al paso uno de este algoritmo, habr\xe1 descartado la mitad de elementos que ten\xeda antes. Sin embargo, usando el algoritmo anterior se iban descartando elementos de a uno."}),"\n",(0,s.jsxs)(n.p,{children:["Y este algoritmo que va dividiendo en dos la lista en la que estoy buscando se llama b\xfasqueda binaria (",(0,s.jsx)(n.em,{children:"binary search"}),")."]}),"\n",(0,s.jsx)(n.p,{children:"Volviendo al ejemplo de la lista de n\xfameros, ahora ordenada, veamos una posible implementaci\xf3n de este algoritmo."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"bool busquedaBinaria(vector<int> s, int x) {\n\tint i = 0;\n\tint j = s.size() - 1;\n\twhile (j > i + 1) {\n\t\tint k = (i+j) / 2;\n\t\tif (s[k] > x) {\n\t\t\tj = k;\n\t\t} else {\n\t\t\ti = k;\n\t\t}\n\t}\n\treturn s[i] == x;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Este algoritmo casi cumple con lo pedido, pero esta fallando en algunos casos puntuales. Por ej.:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"\xbfQu\xe9 pasa si la lista tiene 0 elementos?"}),"\n",(0,s.jsx)(n.li,{children:"\xbfSi tiene un elemento?"}),"\n",(0,s.jsx)(n.li,{children:"\xbfSi el elemento que buscamos es menor al primero de la lista?"}),"\n",(0,s.jsx)(n.li,{children:"\xbfSi el elemento que buscamos es mayor al \xfaltimo de la lista?"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Como el problema no nos limita la lista que podemos recibir como par\xe1metro, tenemos que tener en cuenta estos casos borde. Volviendo a la implementaci\xf3n."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"bool busquedaBinaria(vector<int> s, int x) {\n\tif (s.size() == 0){\n\t\treturn false;\n\t} else if ( s.size() == 1 ){\n\t\treturn s[0] == x;\n\t} else if ( x < s[0] ) {\n\t\treturn false;\n\t} else if ( x >= s[s.size()-1] ) {\n\t\treturn s[s.size()-1] == x;\n\t} else {\n\t\tint i = 0;\n\t\tint j = s.size() - 1;\n\t\twhile (j > i + 1) {\n\t\t\tint k = (i+j) / 2;\n\t\t\tif (s[k] > x) {\n\t\t\t\tj = k;\n\t\t\t} else {\n\t\t\t\ti = k;\n\t\t\t}\n\t\t}\n\t\treturn s[i] == x;\n\t}\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Y as\xed, con una lista ahora ",(0,s.jsx)(n.strong,{children:"ordenada"})," podemos resolver el problema de buscar un elemento en la lista de manera m\xe1s eficiente."]}),"\n",(0,s.jsx)(n.h2,{id:"big-o-notation",children:"Big O notation"}),"\n",(0,s.jsx)(n.p,{children:"Tenemos que responder ahora c\xf3mo sabemos que un algoritmo es mejor que otro. Decimos que un algoritmo es m\xe1s eficiente cuando realiza menos operaciones que otro."}),"\n",(0,s.jsx)(n.p,{children:"As\xed, en ciencias de la computaci\xf3n surge la notaci\xf3n Big O para clasificar algoritmos de acuerdo al crecimiento en tiempos de ejecuci\xf3n y consumo de recursos a medida que aumenta el tama\xf1o de la entrada."}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Big O clasifica el rendimiento en el peor caso de ejecuci\xf3n posible. Es decir el caso que m\xe1s operaciones le tome al algoritmo obtener una respuesta."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["La definici\xf3n formal puede encontrarse en ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Big_O_notation#Formal_definition",children:"Wikipedia"})," aunque no es necesario para entender lo que sigue."]}),"\n",(0,s.jsx)(n.p,{children:"Intuitivamente nos dimos cuenta de que el segundo algoritmo era m\xe1s eficiente, pues en lugar de buscar en cada elemento de la lista, iba dividiendo la lista en 2 sucesivamente, descartando en cada paso la mitad de los elementos que ten\xeda."}),"\n",(0,s.jsxs)(n.p,{children:["Entonces, si llamamos ",(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsx)(n.mrow,{children:(0,s.jsx)(n.mi,{children:"n"})}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"n"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"n"})]})})]})," al tama\xf1o de la lista, a medida que n crece,"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["b\xfasqueda lineal hace ",(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsx)(n.mrow,{children:(0,s.jsx)(n.mi,{children:"n"})}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"n"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"n"})]})})]})," pasos para devolver un resultado"]}),"\n",(0,s.jsxs)(n.li,{children:["b\xfasqueda binaria hace ",(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsxs)(n.mrow,{children:[(0,s.jsx)(n.mi,{children:"l"}),(0,s.jsx)(n.mi,{children:"o"}),(0,s.jsxs)(n.msub,{children:[(0,s.jsx)(n.mi,{children:"g"}),(0,s.jsx)(n.mn,{children:"2"})]}),(0,s.jsx)(n.mo,{stretchy:"false",children:"("}),(0,s.jsx)(n.mi,{children:"n"}),(0,s.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"log_2(n)"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.01968em"},children:"l"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"o"}),(0,s.jsxs)(n.span,{className:"mord",children:[(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"g"}),(0,s.jsx)(n.span,{className:"msupsub",children:(0,s.jsxs)(n.span,{className:"vlist-t vlist-t2",children:[(0,s.jsxs)(n.span,{className:"vlist-r",children:[(0,s.jsx)(n.span,{className:"vlist",style:{height:"0.3011em"},children:(0,s.jsxs)(n.span,{style:{top:"-2.55em",marginLeft:"-0.0359em",marginRight:"0.05em"},children:[(0,s.jsx)(n.span,{className:"pstrut",style:{height:"2.7em"}}),(0,s.jsx)(n.span,{className:"sizing reset-size6 size3 mtight",children:(0,s.jsx)(n.span,{className:"mord mtight",children:"2"})})]})}),(0,s.jsx)(n.span,{className:"vlist-s",children:"\u200b"})]}),(0,s.jsx)(n.span,{className:"vlist-r",children:(0,s.jsx)(n.span,{className:"vlist",style:{height:"0.15em"},children:(0,s.jsx)(n.span,{})})})]})})]}),(0,s.jsx)(n.span,{className:"mopen",children:"("}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,s.jsx)(n.span,{className:"mclose",children:")"})]})})]})," pasos para devolver un resultado"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Si las vemos en un gr\xe1fico"}),"\n",(0,s.jsxs)(n.p,{children:["!",(0,s.jsx)(n.a,{href:"https://files.realpython.com/media/linear_binary_plot.0fc7428a70f0.png",children:"https://files.realpython.com/media/linear_binary_plot.0fc7428a70f0.png"})]}),"\n",(0,s.jsx)(n.p,{children:"Vemos que para valores grandes de number of elements de la lista, el algoritmo de b\xfasqueda binaria usa menos pasos para obtener un resultado."}),"\n",(0,s.jsxs)(n.p,{children:["Y por lo tanto podemos concluir que para tama\xf1os de lista ",(0,s.jsx)(n.em,{children:"suficientemente"})," grandes el algoritmo de b\xfasqueda lineal el m\xe1s eficiente que el de b\xfasqueda lineal."]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>o});var s=a(6540);const i={},l=s.createContext(i);function t(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);