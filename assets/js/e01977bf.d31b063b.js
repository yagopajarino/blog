"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6820],{4325:(e,a,o)=>{o.d(a,{A:()=>n});const n=o.p+"assets/images/podio1-f54ce3c4019deb81f8ce9e452bde6bea.jpeg"},6738:(e,a,o)=>{o.d(a,{R:()=>l,x:()=>i});var n=o(758);const s={},r=n.createContext(s);function l(e){const a=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),n.createElement(r.Provider,{value:a},e.children)}},8388:(e,a,o)=>{o.d(a,{A:()=>n});const n=o.p+"assets/images/podio2-d5d635c522e59098ef4ec2a110ca74ea.jpeg"},8961:(e,a,o)=>{o.r(a),o.d(a,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var n=o(6070),s=o(6738);const r={title:"Race Ceremony",authors:"yago",tags:["algebra","problem solving","codewars"],hide_table_of_contents:!1},l=void 0,i={permalink:"/blog/2023/08/16/race-ceremony",source:"@site/blog/2023-08-16-race-ceremony/index.mdx",title:"Race Ceremony",description:"Notas de mi primer kata publicado en codewars.",date:"2023-08-16T00:00:00.000Z",tags:[{inline:!0,label:"algebra",permalink:"/blog/tags/algebra"},{inline:!0,label:"problem solving",permalink:"/blog/tags/problem-solving"},{inline:!0,label:"codewars",permalink:"/blog/tags/codewars"}],readingTime:8.45,hasTruncateMarker:!0,authors:[{name:"Yago Pajari\xf1o",title:"CS Student, Developer, and Tech Enthusiast",url:"https://github.com/yagopajarino",imageURL:"/blog/img/ape.png",key:"yago"}],frontMatter:{title:"Race Ceremony",authors:"yago",tags:["algebra","problem solving","codewars"],hide_table_of_contents:!1},unlisted:!1,prevItem:{title:"Mejorando la UX de Cocos \ud83e\udd65",permalink:"/blog/2024/02/26/cocos-ux"},nextItem:{title:"La Conjetura de Thor \ud83d\udc36",permalink:"/blog/2023/04/02/conjetura-thor"}},d={authorsImageUrls:[void 0]},c=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"Descripci\xf3n del problema",id:"descripci\xf3n-del-problema",level:2},{value:"Entendiendo el problema",id:"entendiendo-el-problema",level:2},{value:"A bit of \xe1lgebra",id:"a-bit-of-\xe1lgebra",level:2},{value:"Algoritmo",id:"algoritmo",level:2},{value:"Conclusiones",id:"conclusiones",level:2}];function t(e){const a={a:"a",code:"code",em:"em",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.p,{children:"Notas de mi primer kata publicado en codewars."}),"\n",(0,n.jsx)(a.p,{children:"Vuelvo al blog. El primer cuatrimestre 2023 fue intenso: cambio de trabajo, facultad, novia \ud83e\udd17. En este segunda parte del a\xf1o tengo como objetivo escribir algo todas las semanas, hay un gran backlog de temas as\xed que si no hay nuevos posts ser\xe1 exclusivamente por falta de tiempo \ud83e\udd72"}),"\n",(0,n.jsx)(a.h2,{id:"introducci\xf3n",children:"Introducci\xf3n"}),"\n",(0,n.jsxs)(a.p,{children:["El a\xf1o pasado, intentando generar un pedacito de c\xf3digo nuevo todos los d\xedas, me propuse resolver un problema de c\xf3digo por d\xeda durante 90 d\xedas (al principio fueron 60 pero la emoci\xf3n lo llevo a 90). Algo de eso en ",(0,n.jsx)(a.a,{href:"https://github.com/yagopajarino/60-days-of-kata",children:"60 days ok kata"}),"."]}),"\n",(0,n.jsxs)(a.p,{children:["Codewars es una plataforma que permite a usuarios resolver problemas de programaci\xf3n, algo as\xed como un dojo de karate, cada problemita se llama ",(0,n.jsx)(a.em,{children:"kata"})," y hay de distintos temas y niveles. Si como yo, usted cree que la pr\xe1ctica hace la perfecci\xf3n, codewars es \xc9L lugar para practicar c\xf3digo y problem solving."]}),"\n",(0,n.jsxs)(a.p,{children:["Al final del challenge me hab\xeda hecho muy amigo de la plataforma, ",(0,n.jsx)(a.em,{children:"after all"})," la usaba todos los d\xedas. Fue por una de esas que se me ocurri\xf3 contribuir de otro forma: proponiendo nuevos katas en lugar de resolverlos."]}),"\n",(0,n.jsxs)(a.p,{children:["As\xed fue como, volviendo a algunos ejercicios de la facultad y con un poco de ingenio y ",(0,n.jsx)(a.em,{children:"storytelling"})," naci\xf3 ",(0,n.jsx)(a.a,{href:"https://www.codewars.com/kata/62cecd4e5487c10028996e04/",children:"Race Ceremony | Codewars"})]}),"\n",(0,n.jsx)(a.p,{children:"La idea de esta post es compartir las dificultades del problema, el proceso de resoluci\xf3n y una posible soluci\xf3n."}),"\n",(0,n.jsx)(a.h2,{id:"descripci\xf3n-del-problema",children:"Descripci\xf3n del problema"}),"\n",(0,n.jsx)(a.p,{children:"El problema es algo as\xed (en codewars est\xe1 en ingl\xe9s pero ac\xe1 va en castellano):"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-txt",children:"La competencia nacional de karting tiene lugar en tu ciudad y te llamaron para construir el podio de ganadores con los bloques de madera disponibles. Gracias a que viv\xeds en una zona maderera, la cantidad de bloques disponibles es siempre al menos 6.\n\nRecord\xe1 que un podio de ganadores tiene tres plataformas para las tres primeras posiciones, donde el primer lugar es el m\xe1s alto y el segundo es m\xe1s alto que el tercero, adem\xe1s ser ordenan 2do - 1ro - 3ro (Ver imagen)\n\nLos organizadores quieren un podio que cumpla:\n1) El primer lugar tenga altura m\xednima\n2) El segundo lugar tenga altura lo m\xe1s cercana posible al primero, o lo que es igual, que la diferencia de altura entre el primer y segundo lugar sea m\xednima\n3) Todas las plataformas tengan altura mayor a cero\n\nYour misi\xf3n, should you choose to accept it, es determinar la cantidad de bloques de madera a utilizar en las plataformas del podio, ordenadas 2do, 1ro, 3ro.\n"})}),"\n",(0,n.jsx)(a.h2,{id:"entendiendo-el-problema",children:"Entendiendo el problema"}),"\n",(0,n.jsx)(a.p,{children:"Cualquiera que haya visto una carrera habr\xe1 visto un podio de ganadores, la imagen de la portada sirve como aproximaci\xf3n: se tienen tres plataformas para los primeros tres puestos de la carrera con distintas alturas dependiendo la posici\xf3n, obviamente el 1er puesto el m\xe1s alto y el 2do m\xe1s alto que el 3ro."}),"\n",(0,n.jsx)(a.p,{children:"En el problema nos dicen que las plataformas se van a realizar con bloques de madera apilados, suponemos que son todos iguales. Tambi\xe9n nos dicen que siempre ser\xe1n a lo sumo 6, ok."}),"\n",(0,n.jsx)(a.p,{children:"Lo que puede llamar la atenci\xf3n y agregar algo de dificultad son las \u2728condiciones\u2728\xa0que piden los organizadores. Ya no alcanza con agarrar los bloques y armar cualquier podio que cumpla con las alturas, sino que piden un podio espec\xedfico, aquel que cumpla a la vez las tres condiciones que se mencionan."}),"\n",(0,n.jsx)(a.p,{children:"Ac\xe1 es donde sirve arrancar a armar ejemplos para ver qu\xe9 es lo que se pide e intentar encontrar un algoritmo para resolverlo."}),"\n",(0,n.jsx)(a.p,{children:"Imaginemos que tenemos 6 bloques, podr\xedamos hacer un pod\xedo que tenga 5 bloques para el 1ro, uno para el 2do y ninguno para el 3ro"}),"\n",(0,n.jsxs)(a.p,{children:[(0,n.jsx)(a.img,{alt:"imagen",src:o(4325).A+"",width:"1607",height:"858"}),"\nCon 6 bloques sin restricciones se puede armar un podio 1,5,0"]}),"\n",(0,n.jsx)(a.p,{children:"Sin emgargo, se ve facilmente que este podio no cumple con la \xfaltima condici\xf3n: todas las posiciones tienen que tener altura mayor a cero."}),"\n",(0,n.jsx)(a.p,{children:"Podemos solucionarlo sacando un bloque de 1ro y asignandolo a 3ro. Sin embargo es f\xe1cil ver que esto rompe las alturas porque 2do y 3ro quedar\xedan ambos con altura 1. Hay que sacar uno m\xe1s de 1ro y agregarlo a 2do."}),"\n",(0,n.jsx)(a.p,{children:(0,n.jsx)(a.img,{alt:"imagen",src:o(9547).A+"",width:"1607",height:"688"})}),"\n",(0,n.jsx)(a.p,{children:"Pasando un bloque de 1ro a 3ro rompe las alturas (y deja una forma poco amigable)"}),"\n",(0,n.jsx)(a.p,{children:(0,n.jsx)(a.img,{alt:"imagen",src:o(8388).A+"",width:"1620",height:"578"})}),"\n",(0,n.jsx)(a.p,{children:"Pasando un bloque m\xe1s de 1ro a 2do queda como necesitamos"}),"\n",(0,n.jsx)(a.p,{children:"Al finalizar estos dos movimientos, queda un podio con alturas 2,3,1 que cumple las tres condiciones."}),"\n",(0,n.jsx)(a.p,{children:"A medida que se agregan bloques, deja de ser tan claro como dividirlos para cumplir con las tres condiciones."}),"\n",(0,n.jsx)(a.p,{children:"Veamos por ejemplo el caso de 10 bloques. Podriamos armar un podio que tenga alturas 2,7,1 que cumple las condiciones de alturas para las posiciones y que todas son mayores a 0."}),"\n",(0,n.jsx)(a.p,{children:"Sin embargo tambi\xe9n nos piden que la altura del 1er puesto sea m\xednima y que la diferencia de altura entre 1ro y 2do tambi\xe9n sea m\xednima."}),"\n",(0,n.jsx)(a.p,{children:"La cosa ahora es ver como podemos chequear que una altura es m\xednima, antes pod\xedamos ver el dibujo y darnos cuenta si cumpl\xeda las condiciones, ahora ya no es posible."}),"\n",(0,n.jsx)(a.p,{children:"Altura m\xednima, cuando nos dicen que algo es m\xednimo tambi\xe9n nos dicen que cualquier otra cosa es m\xe1s grande que ese m\xednimo. Entonces para probar que la altura del primer puesto es m\xednima debemos probar que no existe ning\xfan otro podio que tenga altura menor."}),"\n",(0,n.jsx)(a.p,{children:"Volviendo a los 10 bloques, si encontramos alg\xfan podio que tenga altura de primer lugar menor a 7 podremos decir que 7 no es la altura m\xednima. Si por ejemplo pasamos un bloque de 1ro a 2do, nos queda 3,6,1. Si ahora pasamos uno de 1ro a 3ro nos queda 3,5,2 y ya no podemos seguir cambiando bloques. 3,5,2 parece un buen candidato a cumplir con las tres condiciones."}),"\n",(0,n.jsx)(a.p,{children:"Parece que la altura no puede ser menor a 5, pues dado que tenemos 10 bloques, si dividimos los 10 bloques en 3 nos queda 3,33 bloques y si queremos que el 1er puesto sea m\xe1s grande que los otros dos necesariamente debemos sumar dos bloques a esa primera divisi\xf3n."}),"\n",(0,n.jsx)(a.p,{children:"Queda verificar la segunda condici\xf3n, que la diferencia de altura entre 1ro y 2do sea m\xednima. Igual que antes, vemos si no existe alguna combinaci\xf3n que logre reducir esta diferencia."}),"\n",(0,n.jsx)(a.p,{children:"Volvamos al momento en que ten\xedamos 3,6,1. Si volvemos a mover un bloque de 1ro a 2do nos queda 4,5,1"}),"\n",(0,n.jsx)(a.p,{children:(0,n.jsx)(a.img,{alt:"imagen",src:o(9738).A+"",width:"1602",height:"824"})}),"\n",(0,n.jsx)(a.p,{children:"En este caso, la altura de 1ro sigue siendo 5 (m\xednima), y se redujo la diferencia de altura entre 1ro y 2do a un bloque. Esta configuraci\xf3n cumple con todas las condiciones pedidas."}),"\n",(0,n.jsx)(a.p,{children:"Todav\xeda no se ve un muy claro un algoritmo que pueda resolver el problema cumpliendo todas las condiciones."}),"\n",(0,n.jsx)(a.h2,{id:"a-bit-of-\xe1lgebra",children:"A bit of \xe1lgebra"}),"\n",(0,n.jsx)(a.p,{children:"S\xed, el problema est\xe1 inspirado en un problema de \xe1lgebra que me tomaron en la facultad. Lo primero que hay que ver es que la cantidad de bloques no est\xe1 acotada, puede ser cualquier cosa (incluso n\xfameros muy grandes). Cualquier algoritmo que itere sobre la cantidad de bloques puede ser muy costoso."}),"\n",(0,n.jsx)(a.p,{children:"Veamos el siguiente algoritmo. Nos dan los bloques y los dividimos en tres pilas iguales. Tendr\xedamos un podio con las tres plataformas iguales, no sirve."}),"\n",(0,n.jsx)(a.p,{children:"Por ejemplo, con 6 bloques, dividimos los bloques en 3 grupos iguales y nos quedan 3 plataformas con 2 bloques cada una y no sobran bloques. Para arreglar las alturas, podemos pasar un bloque de 3ro a 1ro y nos queda la combinaci\xf3n 2,3,1 que es soluci\xf3n de 6 bloques."}),"\n",(0,n.jsx)(a.p,{children:"Con 7 bloques, nos quedan de nuevo 3 plataformas con 2 bloques cada una y sobra un bloque. Agregamos el que sobra a 1ro y pasamos uno de 3ro a 1ro, nos quedar\xeda la combinaci\xf3n 2,4,1."}),"\n",(0,n.jsx)(a.p,{children:"Con 8 bloques, nos vuelve a quedar 3 plataformas de 2 bloques cada una y sobran dos bloques. Agregamos uno de los que sobran a 1ro y el otro a 2do y listo."}),"\n",(0,n.jsx)(a.p,{children:"Con 9 bloques, armamos tres plataformas de 3 bloques cada una y no sobran bloques."}),"\n",(0,n.jsxs)(a.p,{children:["En este punto creo no conviene seguir haciendo ejemplos para convencerse que hay un patr\xf3n que se repite, al dividir la cantidad de bloques por 3 y ver cuantos sobran, estamos generando una ",(0,n.jsx)(a.em,{children:"clase de equivalencia"}),". Solo nos importa el resto que sobrevive al dividir la cantidad de bloques por 3."]}),"\n",(0,n.jsx)(a.p,{children:"Para nuestro algoritmo, tener 6 bloques, 9 o 93 (3*31) es igual porque en los tres casos el resto al dividirlos por 3 es 0."}),"\n",(0,n.jsx)(a.p,{children:"As\xed, vamos a tener tres clases de equivalencia:"}),"\n",(0,n.jsxs)(a.ol,{children:["\n",(0,n.jsx)(a.li,{children:"Todas las cantidades de bloques que al dividirlas por 3 tengan resto 0"}),"\n",(0,n.jsx)(a.li,{children:"Todas las cantidades de bloques que al dividirlas por 3 tengan resto 1"}),"\n",(0,n.jsx)(a.li,{children:"Todas las cantidades de bloques que al dividirlas por 3 tengan resto 2"}),"\n"]}),"\n",(0,n.jsx)(a.p,{children:"Y lo m\xe1s importante, cualquier n\xfamero que nos den siempre va a caer en una (y solo una) de estas clases."}),"\n",(0,n.jsx)(a.h2,{id:"algoritmo",children:"Algoritmo"}),"\n",(0,n.jsx)(a.p,{children:"Usando la intuici\xf3n del paso anterior podemos dise\xf1ar el algoritmo. Lo primero que va a hacer es calcular la divisi\xf3n entera de la cantidad de bloques por 3, como hicimos en los ejemplos. Luego dependiendo el resto de la divisi\xf3n va a tomar uno de los tres posibles caminos."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-cpp",children:"// Implementaci\xf3n del algoritmo en C++\n\nvector<int> race_podium(int blocks) {\n  int cociente = floor(blocks / 3);\n\tvector<int> res;\n\tif (blocks == 7)          res = {cociente, cociente + 2, cociente -1};\n  else if (blocks % 3 == 0) res = {cociente, cociente + 1, cociente - 1};\n  else if (blocks % 3 == 1) res = {cociente + 1, cociente + 2, cociente - 2};\n  else                      res = {cociente + 1, cociente + 2, cociente - 1};\n\n\treturn res;\n}\n"})}),"\n",(0,n.jsx)(a.h2,{id:"conclusiones",children:"Conclusiones"}),"\n",(0,n.jsx)(a.p,{children:"No me quiero seguir extendiendo, creo que el post ya qued\xf3 bastante largo. Solo quiero dejar la reflexi\xf3n de lo valioso que es en muchas ocasiones tener conceptos matem\xe1ticos dando vueltas en la mente a la hora de resolver problemas usando c\xf3digo."}),"\n",(0,n.jsx)(a.p,{children:"La matem\xe1tica, bien ense\xf1ada, ayuda un mont\xf3n a la hora de resolver problemas, de alguna forma moldea la mente para pensar en forma l\xf3gica y algoritmica, encontrar patrones, etc."}),"\n",(0,n.jsx)(a.p,{children:"En el link a codewars se pueden ver otras soluciones, algunas muy interesantes :)"})]})}function u(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(t,{...e})}):t(e)}},9547:(e,a,o)=>{o.d(a,{A:()=>n});const n=o.p+"assets/images/podio3-1355e3745711bfbb17ef4a906edfbe53.jpeg"},9738:(e,a,o)=>{o.d(a,{A:()=>n});const n=o.p+"assets/images/podio4-e9dd0ea12b8c3d37216d3c8aa889350c.jpeg"}}]);